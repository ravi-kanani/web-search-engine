skip to content menu make a website start a blog reviews best web hosting wordpress hosting bluehost review hostgator review siteground review inmotion review a2 hosting review website builders wix review shopify review duda review weebly review ecommerce platforms domain registrars webinar software best vpn services resources blog about 27 handy sql query hacks for wordpress by jamie if you have been managing a wordpress website for a while then you probably know that this content management platform uses a mysql database to store every bit of information it needs to display your pages and apply your chosen settings. wordpress and mysql make a great partnership; both are free, and using wordpress means a constant source of new plugins and features to make life easier. but you can manage your site just as well, and in some cases even better, from phpmyadmin if only you know how to work from the mysql side. that, of course, is just a matter of running queries against the database wordpress relies on. it’s not essential to know mysql to build a wordpress site, but knowing how to run some useful queries that will save you headaches is definitely an advantage. how to manage your wordpress database if you’re familiar with phpmyadmin and sql (structured query language), skip ahead, but if this is new: you can find phpmyadmin on your hosting cpanel if you don’t know where to access it. when the console opens, select your site database from the list on the left. it should reflect the domain or username given to you when your wordpress site was set up, followed by suffix “_wp”, if the name hasn’t been changed. it is advised you don’t mess with the information_schema database at this point. if you see multiple databases and can’t identify the proper database, select them one at a time, and each time open a new query window by clicking the sql tab. type in: select * from wp_options check the entries under the column named option_value. you should recognize your siteurl, blogname, and other information right there on the top few rows. if you the correct info is there, you have the right database. before you do anything else, feel free to explore the tables and column names to see what you’ve got here. you have to select a database (and thus its tables) to run queries against it. if you want to see what’s in each table, use the select * query above, swapping out wp_options for whatever table name you want to explore. just don’t change any values yet. first step: backup your database wordpress needs the information in the database to re-create every last post, comment, and setting you’ve created. no matter how competent you are with sql, remember that one typo or mistaken click could destroy information that corrupts your database to the point where your site won’t load at all. any kind of update or delete query could mean loss of critical site or content information. backing up the database before you start tinkering with your data means you can always put it back just the way it was. you can download plugins like wp-db-backup or wp-dbmanager to assist you with this from your admin dashboard, but you can also do it straight from phpmyadmin before you get started. the quickest and easiest way: 1. login to phpmyadmin. 2. select your wordpress database. 3. click on export at the top of the window 4. in the format drop-down list, select sql to export as a .sql file. it should be the default choice. 5. click go, and a copy of your database will be downloaded. if you wanted to, you could click the custom button for other options. alternately, you could go to the operations tab, enter a file path in the copy database to box, select options, and click go. restore a backup of your mysql database 1. to restore the database, click the import tab. 2. leave the format as sql or change it to whatever format was used 3. browse to where you saved your backup of the database. 4. click go. note that phpmyadmin does have some file size limits, so if your database has grown very large you’ll have to either trim it down using some of the queries below, or try another method such as one of the plugins. upload size is usually 2mb, and these are the settings to look for: post_max_size = 8m upload_max_filesize = 2m note that post_max_size must be the same or larger than upload_max_filesize. these settings may be set globally across the server depending on your installation, and you can’t change them. if not, you may find them in your php .ini file. on apache installations you may be able to change these settings locally by putting a “.htaccess” file in phpmyadmin’s directory. the contents of the file should be: php_value post_max_size 20m php_value upload_max_filesize 20m change ’20m’ to however large you want file limits to be. if you get internal server errors (500) then this likely means your host does not allow you to change these settings and you need to remove this file. if you’re restricted by file sizes, you’ll just have to make multiple file backups by selecting the custom checkbox and choosing individual tables for each backup file rather than the entire database, and restoring them one at a time. sql hacks for wordpress users now that that’s out of the way, here are some sample queries you can run from that same query box that will help in managing wordpress and mysql databases: 1. change your url wordpress stores the absolute path for your site url and home url. if you transfer your site to another server or domain, it will not load if the urls are not updated. you can do this by running: update wp_options set option_value = replace(option_value, 'http://www.myoldurl.com', 'http://www.mynewurl.com') where option_name = 'home' or option_name = 'siteurl'; 2. update guid (globally unique identifier) if you have uploaded your blog site from your computer to a new server or new domain, you also should update the urls for the guid field, since this is used to translate the post slug to the absolute path. update wp_posts set guid = replace (guid, 'http://www.myoldurl.com', 'http://www.mynewurl.com'); 3. update url in content within the content of each post’s data, mysql stores the old urls referencing the old source. you need to change these to the new domain. update wp_posts set post_content = replace (post_content, 'http://www.myoldurl.com', 'http://www.mynewurl.com'); 4. update image path you might have heard about using amazon cloudfront as a content delivery network (cdn) to offload image delivery. after you’ve created a cname record, use the query below to update image paths in wordpress to load from amazon cloudfront. update wp_posts set post_content = replace (post_content, 'src="http://www.myoldurl.com', 'src="http://yourcdn.mynewurl.com'); you also need to update the guid for image attachment: update wp_posts set guid = replace (guid, 'http://www.myoldurl.com', 'http://yourcdn.mynewurl.com') where post_type = 'attachment'; 5. add a new field to posts this query adds a custom field to every post on your site. you can name the new field anything you like to easily identify it later by changing ‘mynewcustomfieldvalue’ to what you want (it must not already exist). insert into wp_postmeta (post_id, meta_key, meta_value)
 select id as post_id, 'universalcustomfield'
 as meta_key 'mynewcustomfieldvalue as meta_value
 from wp_posts where id not in
 (select post_id from wp_postmeta where meta_key = 'universalcustomfield')
 '' and post_type = 'post'; the following will do the same for all the pages on your site: insert into wp_postmeta (post_id, meta_key, meta_value)
 select id as post_id, 'universalcustomfield'
 as meta_key 'mycustomfieldvalue as meta_value
 from wp_posts where id not in
 (select post_id from wp_postmeta where meta_key = 'universalcustomfield')
 and 'post_type' = 'page'; 6. find all posts with field name if you need to find all the posts with the new field you’ve created (or any of the existing fields) you can use the following query, being sure to replace ‘field_name’ with the name of the field you are searching for. of course, you can also do the same for pages by changing ‘post_type’ = ‘post’ to ‘post_type’=’page’. select wp_posts.id, wp_postmeta.meta_key
 from wp_posts
 join wp_postmeta on wp_posts.id = wp_postmeta.post_id
 and wp_postmeta.meta_key = 'field_name'
 where wp_posts.post_type = 'post'
 order by wp_posts.id asc 7. delete post meta every time you install a plugin wordpress makes changes to the wp_postmeta table. after you remove the plugin, the data will still be there as useless clutter. you can clear it up with this query; just remember to change ‘uselessmetakey’ to the appropriate value. delete from wp_postmeta where meta_key = 'uselessmetakey'; 8. change default username wordpress creates the default user account under the name “admin”. this is so obvious that it can be a problem if a hacker or someone else intercepts your account password. they just login and take or delete what they want. for your own peace of mind, you can change this default username. update wp_users set user_login = 'awesome boss' where user_login = 'admin'; 9. identify unused tags if you delete your old posts, the old tags for each will remain in the database. this query allows you to identify all of the old tags. select * from wp_terms wt
 inner join wp_term_taxonomy wtt on wt.term_id=wtt.term_id where wtt.taxonomy='post_tag' and wtt.count=0; 10. deleting spam if you run a blog, you’ve gotten sick of all those spam comments piling up. this one sql command will clear out all the comments you’ve marked as spam: delete from wp_comments where wp_comments.comment_approved = 'spam'; 11. reset password here’s a handy one if you’ve ever forgotten your wordpress password or just want to change it (or someone else’s): update wp_users set user_pass = md5( 'new_password' ) where user_login = 'myusername'; 12. re-assign articles if you want to take ownership of some old legacy articles that came with the site, or that you now own the rights to, you can easily do it, just so long as you know the id of old and new authors (which you can get from the author & user page in the admin panel). just click the author’s name and look for the user_id field. update wp_posts set post_author = 'new-author-id' where post_author = 'previous-author-id'; 13. delete revisions if you edit a post multiple times in wordpress, it will save revision copies, which can add up to quite a bit over time and is a huge waste of resources slowing down your database. clear them out like so: delete a,b,c from wp_posts a
 left join wp_term_relationships b on (a.id = b.object_id)
 left join wp_postmeta c on (a.id = c.post_id)
 where a.post_type = 'revision' this will delete all revisions; if you only want to delete specific ones you’ll have to retrieve the id number and add it to the where clause. 14. delete all unapproved comments swamped with new comments you don’t have time to look at? try this: delete from wp_comments where comment_approved = 0 15. disable comments on old posts for this query, you can specify the comment_status as ‘open’, ‘closed’, or ‘registered_only’, as well as including date criteria. update wp_posts set comment_status = 'closed' where post_date < '2016-03-11' and post_status = 'publish'; 16. export comment emails as unique records accumulating hundreds of comments can also lead to dozens of comments from the same email address. if you want to export all those emails for mailing campaigns or other needs, you can create a list of distinct emails with this query: select distinct comment_author_email from wp_comments; when it has returned the resulting list, under query results operations, select the export option. 17. delete pingback your most popular posts could generate tons of pingbacks accumulating in the database. to get rid of them, use this query: delete from wp_comments where comment_type = 'pingback'; 18. delete comments from a specific url if you’ve been getting a lot of spam from the same url, you can remove all the garbage in one pass with the following query. the ‘%’ means you can delete all entries containing that portion of the url string, which is handy to avoid typing urls, but you may want to be careful not to be too general and delete urls you didn’t mean to. if you have spam comments that all contain the same url, then this query allows you to remove them in one go. the following query will delete all comments with a particular url. the ‘%’ means that any url containing the string within the ‘%’ signs will be deleted, so i was sure to add the qualifier that this only applies to spam comments. delete from wp_comments where comment_author_url like "%nastyspamurl%" and wp_comments.comment_approved = 'spam'; 19. identify & delete posts that are over ‘x’ days old if you ever need to identify and delete posts that are over a certain amount of days old, then this snippet will help. to identify any posts that are over ‘x’ amount of days run this query, remembering to replace the ‘x’ with the number of days you are looking for: select * from 'wp_posts'
 where 'post_type' = 'post'
 and datediff(now(), 'post_date') > x to delete any posts that are over ‘x’ amount of days run this query: delete from 'wp_posts'
 where 'post_type' = 'post'
 and datediff(now(), 'post_date') > x 20. change wordpress posts into pages (or pages into posts) changing posts to pages is easy enough: update wp_posts set post_type = 'page' where post_type = 'post' … and if you want to change them back again: update wp_posts set post_type = 'post' where post_type = 'page' to change individual posts (pages) you’ll have to include the correct id field in a where clause. 21. removing shortcodes one of wordpress’ features is that it allows us to reuse repeated snippets of code by identifying them via shortcodes. shortcodes are convenient, but if you decide you don’t want to use one anymore, run this query, replacing “trashshortcode” with the name of the one you’re trying to lose. update wp_post set post_content = replace(post_content, '[trashshortcode]', '' ) ; 22. find and replace post content if you find you need to update or change existing text across multiple posts, for whatever reason, the easiest way to do it is with the following easy query: update wp_posts set 'post_content'
 = replace ('post_content',
 'oldtext',
 'newtext'); 23. find posts where field is missing if you want to find all the posts or pages where, in fact, your new field has not been added, you can just use this query, again, being sure to change ‘field_name’ to the name of the field you’re checking for, or changing ‘post’ to ‘page’ to find the pages where this field isn’t used. use this mysql query to get all posts with a missing custom field. we’ll query post_type=page for the purpose of this tutorial. you will have to replace custom_field_name with the actual custom field name. select wp_posts.id, wp_postmeta.meta_key
 from wp_posts
 left join wp_postmeta on wp_posts.id = wp_postmeta.post_id
 and wp_postmeta.meta_key = 'custom_field_name'
 where wp_postmeta.meta_key is null and wp_posts.post_type = 'post'
 order by wp_posts.id asc 24. queries to find edited posts it can be sometimes handy to query recently modified (last month or last few days) posts in wordpress mysql tables. here are some handy queries: if you’re constantly updating facts and figures in your posts, it can be easy to lose track. the following series of queries will help you to find posts that have been recently modified for specific time periods: in the last month: select * from wp_posts where post_modified > now() - interval x month
 order by post_modified desc; in the last week: select * from wp_posts where post_modified > now() - interval 1 week
 order by post_modified desc; you can change the interval to whatever value you need, such as day or hour. 25. find all posts by category first, you will need to find the id for a category name. an easy way to find the id for a specific category of posts is the following query (replacing ‘general’ with the name of the category you had in mind: select wp_term_taxonomy.term_taxonomy_id
 from wp_term_taxonomy join wp_terms on (wp_term_taxonomy.term_id = wp_terms.term_id)
 where wp_term_taxonomy.taxonomy = 'category' and wp_terms.name = 'general'; then you can find all the posts by that term_taxonomy_id (replacing 999 with the correct id): select * from wp_posts join wp_term_relationships on (wp_posts.id = wp_term_relationships.object_id)
 where wp_term_relationships.term_taxonomy_id = 999; 26. which posts get the worst spam you can find out the top 10 posts on your site that seem to attract the most spammers. you can always change the ’10’ to a 5 or 20, or whatever you’re interested in. select `comment_post_id`, count(*) as amount
 from `wp_comments` where `comment_approved` = 'spam'
 group by `comment_post_id`
 order by amount desc limit 0, 10 27. monthly posts if you are allowing posts from guests or other authorized users, you can determine how many articles come from which author for a timespan of say, 1 month in this example. when you’ve got a lot of articles to juggle, this can help generate data for post tracking, such as overall trends or site growth. if you wanted to, you could be more specific by adding post_author to the where clause or specifying a particular monthname and year. select wp_users.display_name as writer, concat_ws( ', ', monthname( `post_date` ) , year( `post_date` ) ) as `post_month` , count( * ) as `post_count`
 from `wp_posts`
 join wp_users on ( wp_posts.post_author = wp_users.id )
 where `post_type` = 'post'
 and `post_status` = 'publish'
 group by `post_month`
 order by `post_date` as you can see, there’s almost nothing you can’t do with your wordpress site in the mysql database. there are a variety of good tutorials available out there, but hopefully, we’ve simplified a lot of tasks for you by providing the above examples. good luck! the following two tabs change content below. bio latest posts jamie my name is jamie spencer and i have spent the past 5 years building money making blogs. after growing tired of the 9-5, commuting and never seeing my family i decided that i wanted to make some changes and launched my first blog. since then i have launched lots of successful niche blogs and after selling my survivalist blog i decided to teach other people how to do the same. latest posts by jamie (see all) interview – cameron james from anymail finder - march 26, 2020 the best standing desks 2020 – detailed buyers guides and reviews - march 25, 2020 how to make money as a kid in 2020 – 6 to 16 years old - march 19, 2020 categories wordpress post navigation wechat social media image sizes cheat sheet – 2017 edition 5 shopify alternatives to take your online business to the next level – 2020 leave a comment cancel reply commentname email save my name and email in this browser for the next time i comment. wp theme detector top plugins best affiliate wordpress plugins best wordpress membership plugins best social sharing plugins for wordpress best wordpress plugins for business websites best related posts plugins for wordpress best wordpress landing page plugins to boost conversions wordpress articles best affiliate wordpress plugins for 2020 best wordpress membership plugins for 2020 99 wordpress stats you have to see to believe – 2020 best month to month web hosting deals – 2020 how to register a domain name: everything you need to know the ultimate guide to the amazon associates program – 2020 how to add a horizontal line to a wordpress post or page how to add a contact form to your wordpress website or blog how to speed up wordpress 2020 wordpress website checklist for launching a new website categories amazon fba blog traffic blogging business cheat sheets content marketing design tips email marketing graphic design interviews make money online marketing photography questions social tech buying guides web development website cms wordpress latest posts interview – cameron james from anymail finder the best standing desks 2020 – detailed buyers guides and reviews how to make money as a kid in 2020 – 6 to 16 years old how to write a blog post – a guide for new & experienced bloggers best social media management tools 2020 best of the blog online business ideas that work how to build an amazon affiliate website best affiliate marketing platforms best blogging sites 103 ways to make money online create a professional email address best social media management tools affiliate marketing glossary what is a blog? free web hosting latest hosting reviews best vps hosting best magento hosting best cloud hosting best dedicated hosting cheap vps hosting hosting coupons best uk web hosting best web hosting for australia cheap web hosting cookie policy privacy policy site builder reviews shopify review squarespace review weebly review wix site builder review duda website builder review site links affiliate disclaimer cheat sheets tutorials and guides black friday / cyber monday © 2020 make a website hub