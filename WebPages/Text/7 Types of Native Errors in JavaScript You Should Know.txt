sign in write ✏️ bit blog javascript webdev react angular vue ⚡️ build a component library → 7 types of native errors in javascript you should know understand the common types of native errors in javascript. chidume nnamdi 🔥💻🎵🎮 follow feb 26 · 6 min read we see errors everywhere, from our browser console to the terminal of our machine running node.js. this post focuses on outlining the types of errors that we may encounter during js development. tip: good errors make the difference between a fast and painless developing-experience and a slow and hellish one. when writing reusable code, make sure you write clear and comprehensible errors. you can also use tools like bit (github) to share reusable components straight from any codebase to a shared component collection in bit.dev. it’s great for maximizing code reuse, speeding up development and building a more maintainable and scalable codebase. example: browsing through shared components in bit.dev 1. rangeerror this is thrown when a number is outside an allowable range of values. for example, const l = console.logconst arr = [90,88] arr.length=90**99 we have an array, arr with two elements. next, we try to grow the array to contain 90**99 == 2.9512665430652753e+193 elements. this number is way past the size arrays can be grown to. running it will throw a rangeerror: $ node errors errors.js:4 arr.length=90**99  ^rangeerror: invalid array length because the number we want to increase the arr array to is out of the range specified by js. 2. referenceerror this error is thrown when a reference made to a variable/item is broken. that is the variable/item doesn’t exist. for example, const l=console.logconst cat = "cat" cat dog we have a variable cat initialized to “cat”. next, we referred to the cat variable and dog variable. cat variable exists but dog variable doesn’t. cat will return “cat”, while dog will throw a reference error because the name dog can’t be found on the environment record. $ node errors errors.js:3 dog ^referenceerror: dog is not defined whenever we create or define a variable, the variable name will be written to an environment record. this environment record is like key-value storage, +-------------+ | key | value | --------------- | cat | "cat" | +-------------+ that stores variables defined in our program, whenever we reference a variable. the environment record is searched with the name of the variable as key when it is found on the record the value is extracted and returned. calling a function that hasn’t been defined. now, when we create or define a variable without assignment. the variable is written to the environment record, with the key as the variable name but the value will hold undefined. var catenv record +-----------------+ | key | value | ------------------- | cat | undefined | +-----------------+ when the variable is later assigned a value, the variable is searched in the env record and when found the initial undefined valued is overwritten with the assigned value. var cat cat = "cat"env record +-------------+ | key | value | --------------- | cat | "cat" | +-------------+ so, a refernceerror is thrown by the js engine when a variable name can’t be found in the env record. +-------------+ | key | value | --------------- | cat | "cat" | +-------------+cat // "cat", yes, :) it's there dog // :( what's this? can't find it note: an undefined variable won’t throw referenceerror because it exists in the env record just that its value hasn’t been set. 3. syntaxerror this is the most common error we encounter. this error occurs when we type code that the js engine can understand. this error is caught by the js engine during parsing. there are different stages in the js engine our code is put through before we see those results on the terminal. tokenization parsing interpreting tokenization breaks the source of the code into individual units. at this stage, numbers, keywords, literals, operators are sorted out and individually marked. next, the token stream generated will be passed to the parsing stage, which is handled by a parser. this is where an ast is generated from the token stream. ast is an abstract representation of the structure of our code. during these two stages, tokenization and parsing, if the syntax/source of our codes doesn’t conform to the syntax rules of js makes the stages fail and throw syntaxerror. for example, const l = console.loglet cat h = "cat" what is with the lone “h”? the “h” being there breaks the code. $ node errors errors.js:3 let cat h = "cat"  ^syntaxerror: unexpected identifier see, node.js points out the problem. it says that the “h” was unexpected. it being there breaks the declaration of the cat variable. so we can say syntax error occurs during parsing/compile time. 4. typeerror typeerror is used to indicate an unsuccessful operation when none of the other nativeerror objects are an appropriate indication of the failure cause. typeerror occurs when an operation is performed on a wrong data type. maybe a boolean is expected but a sting is found. for example, if we try to convert a number to uppercase like this: const num = 123 num.touppercase() this will throw a typeerror $ node errors errors.js:4 num.touppercase()  ^typeerror: num.touppercase is not a function because the touppercase function expects a string data type. the touppercase function is intentionally generic; it does not require that its this value be a string object. therefore, it can be transferred to other kinds of objects for use as a method. only strings are converted to uppercase or lowercase if we call the touppercase function on objects, boolean, symbol, null, undefined data types we will get the typeerror because it is the wrong data type it operates. 5. urierror this indicates that one of the global uri handling functions was used in a way that is incompatible with its definition. uri (uniform resource indicator) in js has the functions: decodeuri, decodeuricomponent, etc. if we call any of them with the wrong parameter we will get a urierror decodeuri("%") ^urierror: uri malformed decodeuri, gets the unencoded version of a uri. “%” is not the right uri, so a urierror was thrown. urierror is thrown when there’s a problem encoding or decoding the uri. 6. evalerror this is used to identify errors when using the global eval() function. according to ecmaspec 2018 edition: this exception is not currently used within this specification. this object remains for compatibility with previous editions of this specification. 7. internalerror this error occurs internally in the js engine, especially when it has too much data to handle and the stack grows way over its critical limit. this occurs when the js engine is overwhelmed by too many recursions, too many switch cases, etc switch(num) {  case 1:  ...  break  case 2:  ...  break  case 3:  ...  break  case 4:  ...  break  case 5:  ...  break  case 6:  ...  break  case 7:  ...  break  ... up to 1000 cases  } too much recursion, a simple example is this: function foo() {  foo() } foo() conclusion as we said, no one is above mistakes. it is a steady occurrence, so far as we type codes. to beat it, we need to know the types of native errors we can throw. we listed them in this post, with few examples to show how they are encountered. so, whenever an error is thrown either in your terminal or browser, you can now easily spot where and how the error occurred, with it you can write a better, less error-prone code. if you have any questions regarding this or anything i should add, correct or remove, feel free to comment, email or dm me. thanks !!! learn more maximizing code reuse in react how to speed-up development by sharing reactjs components from any codebase, using bit blog.bitsrc.io 10 top chrome extensions for front-end developers 10 useful chrome devtools extensions you should know in 2020. blog.bitsrc.io 10 useful web apis for 2020 awesome web apis for your next web app — with examples. blog.bitsrc.io bits and pieces the best of frontend development articles, tutorials, and news. follow 884 javascript error error message programming nodejs 884 claps written by chidume nnamdi 🔥💻🎵🎮 follow i am looking for a job | i am available for gigs, full-time and part-time jobs, contract roles | hire me! | 📦 : kurtwanger40@gmail.com | twitter: @ngarchangel follow bits and pieces follow the best of frontend development articles, tutorials, and news. follow write the first response more from medium more from bits and pieces more from bits and pieces 9 top js gaming engines and libraries for 2020 fernando doglio in bits and pieces mar 25 · 8 min read 408 more from bits and pieces more from bits and pieces 5 recommended reactjs tips and best practices adam raphael in bits and pieces mar 24 · 9 min read 152 more from bits and pieces more from bits and pieces how to use the web storage api chidume nnamdi 🔥💻🎵🎮 in bits and pieces mar 24 · 7 min read 503 discover mediumwelcome to a place where words matter. on medium, smart voices and original ideas take center stage - with no ads in sight. watch make medium yoursfollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. explore become a memberget unlimited access to the best stories on medium — and support writers while you’re at it. just $5/month. upgrade abouthelplegal