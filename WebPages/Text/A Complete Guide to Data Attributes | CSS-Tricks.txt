skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / a complete guide to data attributes author chris coyier 9 comments join conversation last updated feb 18, 2020 attribute selectors attributes data attributes html personalized marketing with mailchimp table of contents introduction syntax styling with data attributes accessing data attributes in javascript introduction html elements can have attributes on them that are used for anything from accessibility information to stylistic control. <!-- we can use the `class` for styling in css, and we've also make this into a landmark region -->
<div class="names" role="region" aria-label="names"></div> what is discouraged is making up your own attributes, or repurposing existing attributes for unrelated functionality. <!-- `highlight` is not an html attribute -->
<div highlight="true"></div>

<!-- `large` is not a valid value of `width` -->
<div width="large"> there are a variety of reasons this is bad. your html becomes invalid, which may not have any actual negative consequences, but robs you of that warm fuzzy valid html feeling. the most compelling reason is that html is a living language and just because attributes and values that don't do anything today doesn't mean they never will. good news though: you can make up your own attributes. you just need to prefix them with data-* and then you're free to do what you please! syntax it can be awfully handy to be able to make up your own html attributes and put your own information inside them. fortunately, you can! that's exactly what data attributes are. they are like this: <!-- they don't need a value -->
<div data-foo></div>

<!-- ...but they can have a value -->
<div data-size="large"></div>

<!-- you're in html here, so careful to escape code if you need to do something like put more html inside -->
<li data-prefix="careful with html in here."><li>

<!-- you can keep dashing if you like -->
<aside data-some-long-attribute-name><aside> data attributes are often referred to as data-* attributes, as they are always formatted like that. the word data, then a dash -, then other text you can make up. can you use the data attribute alone? <div data=""></div> it's probably not going to hurt anything, but you won't get the javascript api we'll cover later in this guide. you're essentially making up an attribute for yourself, which as i mentioned in the intro, is discouraged. what not to do with data attributes store content that should be accessible. if the content should be seen or read on a page, don't only put them in data attributes, but make sure that content is in the html content somewhere. <!-- this isn't accessible content -->
<div data-name="chris coyier"></div>

<!-- if you need programmatic access to it but shouldn't be seen, there are other ways... -->
<div>
  <span class="visually-hidden">chris coyier</span>
</div> here's more about hiding things. styling with data attributes css can select html elements based on attributes and their values. /* select any element with this data attribute and value */
[data-size="large"] {
  padding: 2rem;
  font-size: 125%;
}

/* you can scope it to an element or class or anything else */
button[data-type="download"] { }
.card[data-pad="extra"] { } this can be compelling. the predominant styling hooks in html/css are classes, and while classes are great (they have medium specificity and nice javascript methods via classlist) an element either has it or it doesn't (essentially on or off). with data-* attributes, you get that on/off ability plus the ability to select based on the value it has at the same specificity level. /* selects if the attribute is present at all */
[data-size] { }

/* selects if the attribute has a particular value */
[data-state="open"],
[aria-expanded="true"] { }

/* "starts with" selector, meaning this would match "3" or anything starting with 3, like "3.14" */
[data-version^="3"] { }

/* "contains" meaning if the value has the string anywhere inside it */
[data-company*="google"] { } the specificity of attribute selectors it's the exact same as a class. we often think of specificity as a four-part value: inline style, ids, classes/attributes, tags so a single attribute selector alone is 0, 0, 1, 0. a selector like this: div.card[data-foo="bar"] { } ...would be 0, 0, 2, 1. the 2 is because there is one class (.card) and one attribute ([data-foo="bar"]), and the 1 is because there is one tag (div). attribute selectors have less specificity than an id, more than an element/tag, and the same as a class. case-insensitive attribute values in case you're needing to correct for possible capitalization inconsistencies in your data attributes, the attribute selector has a case-insensitive variant for that. /* will match
<div data-state="open"></div>
<div data-state="open"></div>
<div data-state="open"></div>
<div data-state="open"></div>
*/
[data-state="open" i] { } it's the little i within the bracketed selector. using data attributes visually css allows you to yank out the data attribute value and display it if you need to. /* <div data-emoji="‚úÖ"> */

[data-emoji]::before {
  content: attr(data-emoji); /* returns '‚úÖ' */
  margin-right: 5px;
} example styling use-case you could use data attributes to specify how many columns you want a grid container to have. <div data-columns="2"></div>
<div data-columns="3"></div>
<div data-columns="4"></div> codepen embed fallback accessing data attributes in javascript like any other attribute, you can access the value with the generic method getattribute. let value = el.getattribute("data-state");

// you can set the value as well.
// returns data-state="collapsed"
el.setattribute("data-state", "collapsed"); but data attributes have their own special api as well. say you have an element with multiple data attributes (which is totally fine): <span 
  data-info="123" 
  data-index="2" 
  data-prefix="dr. "
  data-emoji-icon="üèåÔ∏è‚Äç‚ôÄÔ∏è"
></span> if you have a reference to that element, you can set and get the attributes like: // get
span.dataset.info; // 123
span.dataset.index; // 2

// set
span.dataset.prefix = "mr. ";
span.dataset.emojiicon = "üé™"; note the camelcase usage on the last line there. it automatically converts kebab-style attributes in html, like data-this-little-piggy, to camelcase style in javascript, like datathislittlepiggy. this api is arguably not quite as nice as classlist with the clear add, remove, toggle, and replace methods, but it's better than nothing. you have access to inline datasets as well: <img src="spaceship.png"
  data-ship-id="324" data-shields="72%"
  onclick="pewpew(this.dataset.shipid)">
</img> json data inside data attributes <ul>
  <li data-person='
    {
      "name": "chris coyier",
      "job": "web person"
    }
  '></li>
</ul> hey, why not? it's just a string and it's possible to format it as valid json (mind the quotes and such). you can yank that data and parse it as needed. const el = document.queryselector("li");

let json = el.dataset.person;
let data = json.parse(json);

console.log(data.name); // chris coyier
console.log(data.job); // web person javascript use-cases the concept is that you can use data attributes to put information in html that javascript may need access to do certain things. a common one would have to do with database functionality. say you have a "like" button: <button data-id="435432343">‚ô°</button> that button could have a click handler on it which performs an ajax request to the server to increment the number of likes in a database on click. it knows which record to update because it gets it from the data attribute. specifications selectors level 4 (working draft) selectors level 3 (recommended) selectors level 2, revision 1 (initial definition) browser support this browser support data is from caniuse, which has more detail. a number indicates that browser supports the feature at that version and up. desktop chrome firefox ie edge safari 7 6 11 12 5.1 mobile / tablet android chrome android firefox android ios safari 80 68 3 5.0-5.1 our learning partner looking for a complete course on getting into web development? frontend masters has a complete intro course to web development by renouned developer brian holt from microsoft. you'll learn how to be a successful coder knowing everything from practical html and css to modern javascript to git and basic back-end development. looking for a complete course on getting into web development? frontend masters has a complete intro course to web development by renouned developer brian holt from microsoft. you'll learn how to be a successful coder knowing everything from practical html and css to modern javascript to git and basic back-end development. comments paris permalink to comment# february 17, 2020 i‚Äôm assuming you could also do [data-columns] {
  background: #9ccc65;
  grid-template-columns: repeat(attr(data-columns), 1fr);
}

 reply chris coyier permalink to comment# february 18, 2020 i don‚Äôt think so right at this moment. i think attr() only works for the content property and it maybe has something to do with types (e.g. we need a way to specify that an attribute is a number or length or something and not a string). heinz permalink to comment# february 18, 2020 json data (or any other data) inside data attributes ‚Ä¶. i use the data-attribute to transport data from a backend sql-db via php to my web clients. as i can not make any assumptions about the data i have to transport, i encode64 it before enclosing it as a value in ‚Äò ‚Äò or ‚Äù ‚Äù for the data-attribute. this way i avoid any escape orgy to make sure the data arrives at the client. at the client when consuming the data i use decode64, to get the data back. regards reply florian permalink to comment# february 18, 2020 imo this is one step too much already. especially when you‚Äôre working with php, just using htmlspecialchars() on the data (possibly with the ent_quotes flag) is enough to guarantee you‚Äôre not getting into any escaping trouble. this has the advantage of not having to do any decoding on the javascript side ‚Äî just accessing element.dataset.name will yield the correct data with all the encoded characters already decoded by the browser. heinz permalink to comment# february 18, 2020 hi florian this is true, looks like overkill, however i feel beeing on the ‚Äòsafer‚Äô side because i am not altering the original data, i just transport the data as is, making no assumption about its usage. i, on the backend, do not know if the client will render the data or use it in a regex, pass it on to some other process or whatever ‚Ä¶ cheers matt bloomfield permalink to comment# february 18, 2020 wow, great post. i love your complete guides. as a self-taught dev i often find that i knew like 50% of each section of these guides just by experience, but getting the full picture helps so much! i had no idea there was a javascript api for these or that you had so many options for selecting within css. very cool. reply dustin permalink to comment# february 18, 2020 this is a really great article. thanks for writing it up. and i love the green lights at the bottom. reply cinnfhaelidh permalink to comment# february 18, 2020 it should probably be pointed out that case-insensitive attribute values are not supported by internet explorer or legacy edge. contrary to what can i use says it does work in chromium edge https://caniuse.com/#feat=mdn-css_selectors_attribute_case_insensitive_modifier reply joe lamyman permalink to comment# february 18, 2020 this is a really useful guide, thank you chris! immediately inspired, i went to try and make a css system where a user can use the data attribute to specify the rows they want (just like in your example), but then use attr(data-columns) within grid-template-columns to give me something like: grid-template-columns: repeat(attr(data-columns), 1fr); i thought that would be a really nice way to quickly define a grid from the html, but unfortunately that does not work, do you know if there‚Äôs a way to do something similar without having to write the css for all possible options or am i missing something? reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast‚Å†-‚Å†moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents üìÖ upcoming front-end conferences css-tricks presents the power of serverless for front-end developers