skip to content menu make a website start a blog reviews best web hosting wordpress hosting bluehost review hostgator review siteground review inmotion review a2 hosting review website builders wix review shopify review duda review weebly review ecommerce platforms domain registrars webinar software best vpn services resources blog about an introduction to frontend frameworks by jamie harrop frontend frameworks have seemingly taken the web development world by storm in recent years. anybody operating as a web developer, designer, programmer or architect, especially those new to this game and even more so those just working web design as a hobby rather than a full time role, will know all too well the pace at which this industry moves. keeping up with the relentless speed at which new technologies are released and old technologies are updated is one of the most crucial and critical tasks anybody in this industry must undertake. to not do so for more than a few months results in us feeling lost in a sea of information, unable to consume at a rate any faster than the technological output. once you’re out of touch, it’s difficult to step back in touch. and so this leads us to frontend frameworks; arguably one of the most basic, yet genuinely and technically beneficial developments the web site development industry has seen in recent times. (by the way, when we say ‘industry’, we refer to both professionals and hobbyists… it’s a rare industry that doesn’t distinguish between the two, but ours is one of them). what are frontend frameworks? you possibly know them as bootstrap or foundation. these are the two most popular frontend frameworks, but there are many more that we’ll discuss later in this blog post. frontend frameworks themselves are nothing new. in their most basic form, they’re nothing more than a predefined set of css classes and javascript functions for a developer to quickly and easily tap into. some are even more basic, stripping out the javascript and just being a list of css classes. this technique of pre-defining pieces of markup for reuse over time has happened for many years, but more often than not in private, whether it be an agency who have built their own classes, libraries and functions to speed up production, or a one man hobbyist who wanted to work smarter, rather than harder. the difference now, of course, is that frontend frameworks have gone public, gone mainstream, and become accessible to the masses. one of the clear disadvantages to a privately developed, in-house framework, was the leg-work it took to develop in the first place. sure, it saved those people time and effort in the long run (and i’ve no doubt it was worth it long term) but that initial leg-work to create an in-house framework was (and still is, should you create your own) significant enough to be considered a separate project stream all in itself. a public, mainstream, accessible and pre-developed framework such as bootstrap by twitter or foundation by zurb, however, takes this initial leg-work away from the user and places it upon the framework developers themselves. so now frameworks, a concept primarily developed privately to speed up in-house development, have helped web developers become even more efficient thanks to a bunch of friendly people whose role it is to develop frameworks for those of us not only lacking the time to write all markup from scratch (first problem), but also too strapped for time we can’t even write our own framework to solve the first problem. clever, and incredibly useful! why would i use a frontend framework? frontend frameworks have a variety of benefits, primarily focusing on aiding the developer to speed up production and reduce bugs throughout the markup development stage of all frontend web development projects. speed and simplicity the primary goal of frontend frameworks has always been to speed up production for the developer, reduce costs, increase yield, and do so while keeping it simple, concise and straightforward for even the most novice of web developers. every good frontend framework achieves this goal, allowing those not familiar with the markup to quickly pick up and learn the defined classes and and functions with minimal effort. there’s nothing more frustrating than taking charge of a web site you didn’t develop and having to spend days, or potentially weeks, familiarizing yourself with the previous developers markup. we all have unique handwriting, and html, css and javascript markup is the same. each web developer has their own unique signature; their own way of structuring markup and their own approaches to common bug fixes. a common, public framework solves this problem immediately, because the structure and markup signature is defined not by the end-user, but by the framework developers, and is recognised the world over. i could walk into any company, any hobbyist’s office, any agency, and as long as they were using one of the frameworks listed in this article, i’d be able to recognise, understand, and importantly feel comfortable with their markup within a few minutes. that’s the benefit of a common language backed up by a common structure and a common set of rules to achieve common goals. without a framework, or with a framework developed in-house, this benefit does not exist. instead, developers are stuck trying to familiarise themselves with inherited markup for the first days or weeks of any project they undertake from a past individual. responsive, cross-device support built in in a world where the majority of internet traffic to web sites in the western world comes from a handheld device, be it a tablet or smartphone, there’s very little excuse for not catering for this market with a responsive web site. developing a responsive stylesheet to target all required screen sizes and devices can be tricky to master from scratch. at what screen resolution should the smartphone landscape css kick in? how about smartphone portrait? and don’t forget tablet landscape and portrait. and extra large resolutions seen on some televisions and smartboards. and devices with retina screens. do you know what the width breakpoint is for all those potential devices and scenarios to allow you to target those individually with css? some of you may. many others won’t. while it’s useful to do your research and know (i’d strongly recommend it), just the thought of having to write the stylesheet template to target all those scenarios makes me cringe. there’s good news though. most frontend frameworks are built to be responsive, to expand and contract gracefully for any device and any screen resolution. for example, the ability to hide and show different containers on different screen sizes is nothing more than the addition of a class to your <div>. (<div class=”hidden-xs”> to hide a div on a smartphone device using twitter bootstrap, by the way). it’s simple, straight forward, and as long as you have a handy list of all available classes and functions (which we’ll discuss shortly), it’s far easier than having to figure out the exact screen width you need to target and then write the rule to set this div to display:none. of course, this is still happening in the background, but it has been written for you already and all you need to do is target it with the correct pre-defined class. pre-tested markup you can be confident the markup contained within any good frontend framework has been tested and has passed a rigorous set of criteria before it was signed off and handed to you, the end-user. common and not so common bugs have already been identified, assessed and resolved, leaving you with very little bug fixing to do throughout your project. the decision making process is made easy while developing web sites, often the most time consuming aspect is not writing markup, but making decisions regarding the functionality as we code. even the best designers will sometimes leave elements open for interpretation by the developer, and so making decisions over whether to have a sticky header, sliding nav bar or sticky footer can sometimes fall to us as we code. without a framework, implementing some of these would be time consuming and potentially pointless, should we decide to use a different method after we’ve built and seen it working. with a frontend framework, however, switching on elements such as sliding navigation bars, sticky headers and footers and other interactive elements, as well as styling buttons and providing smooth hover effects, is made as simple as adding a defined list of classes to the correct elements in your markup. now, creating a navigation bar with styled buttons, a drop down menu, and a sticky header, is a five minute job rather than a 30+ minute job. detailed documentation and wide support network as we discussed earlier, frameworks are very useful when you have the documentation to back you up. it’s a worthless tool without the documentation to explain the structure of the framework and the classes and functions available for you to tap into. fortunately, all good frontend frameworks come with excellent documentation, and most come with a fantastic community support network, made up of both the framework developers and experienced end-users. the flaws of frontend frameworks there are many benefits of using frameworks, but there are flaws too. it wouldn’t be right to discuss one without pointing out the other, so below we discuss a few of the problems frameworks may throw into the mix. customization difficulties while frameworks and their common structure and rules throughout the markup can be positive in several ways,, this same benefit can also become a flaw when you try to heavily customize a web site using a framework. frameworks must try to find a balance between providing you with ready-to-use elements, whilst also not locking down the functionality and customization ability of these elements. sometimes, this balance isn’t found, and we end up using functions and classes that are already pre-styled for us and programmed to work a specific way. to deviate from this is often quite difficult. this brings us on to the next flaw. the potential for web sites to look the same with the struggle to customise specific elements of frameworks, there is always that potential for web sites to look the same. while it’s absolutely possible to customize the layout of the whole web site and each individual page, elements on that page could (and probably will) look similar to other web sites. for example, bootstrap has pre-styled buttons. while it’s quick and easy to change the colors of these to match your web site, it’s more time consuming to start changing the hover state, the animation and the gradient effect. most end-users of a framework only change the basic style settings, such as fonts and colours, which leaves other more subtle styling in place as per the default framework. you might not notice this too much, but i guarantee, once you’ve seen a bootstrap or foundation styled button, taken note of the hover and transition effects, you’ll start to spot them all across the internet. a lack of code familiarity while it’s an excellent advantage to use a common framework and be able to edit web sites the world over within minutes of inspecting the source, once you start trying to edit a framework’s raw markup, instead of just using the system as an end-user, it becomes tricky. with hundreds of lines of css and hundreds of lines of javascript, all written by the framework developers, your familiarization of that code will be non-existent, therefore making it extremely laborious should you wish to edit the framework functionality itself. a need to update the framework like a software package, take wordpress for example, frameworks need to be updated on a regular basis. new releases are developed by the framework teams, bugs are fixed as the community reports them, and new features are produced. while you may need to update your markup once every few years as new versions of html/css are developed if you had coded it from scratch with no framework, you may end up upgrading your framework markup every few months. this is both time consuming and potentially risky. do we restrict our own development knowledge? one argument against frameworks is they restrict our raw knowledge of html, css and javascript. after all, if somebody is providing us with a list of css classes, already styled and pre-defined in a stylesheet, as well as a common html structure, and pre-written javascript functions, surely our own knowledge as an end-user has the potential to dwindle. maybe so, and it’s for this reason that we should always push ourselves and push frameworks to ensure we (and our customers, should you develop for them) always get the best user experience, regardless of whether or not we use a framework. the most popular frontend frameworks so assuming you would like to use a frontend framework, which one do you use? there are many out there, some more popular than others, and some made for those more technical than a novice. here, we’ll briefly look at some of the most popular. twitter bootstrap bootstrap, developed by two employees at twitter, has widely become the world’s most popular frontend framework. while not the first framework to be fully responsive, it now is so, and handles all devices and screen resolutions exceptionally well. there is an excellent community of bootstrap developers and experienced end-users on hand to help, and the documentation is carefully thought through. bootstrap’s classes and functions tend to be very ‘complete’, often styled fully with fonts, colours and the traditional bootstrap brand. as a result, it can be difficult to steer your ship away from this feel to ensure it looks unique. that said, with some work it is possible absolute possible to develop a bootstrap web site that appears custom and unique to you.. find out more about bootstrap . zurb foundation quite often the choice between using bootstrap or foundation is purely personal preference due to how similar they are, but foundation has several features that may sway your vote in this direction. firstly, foundation’s elements are not as ‘complete’ at first glance, so steering away from the default look and feel to give your web site it’s own unique brand is generally very easy. foundation, unlike bootstrap which uses pixels, uses rems for font sizing. while this may seem like a subtle difference, it makes absolute sense to use a relative unit such as rems on a responsive design, as opposed to an absolute unit such as pixels. foundation also has some excellent built in features that bootstrap doesn’t contain, such as built-in form validation and interchange, a system used to dynamically load responsive content for different browsers depending on device and screen size (this is especially useful for loading smaller images on mobile devices, instead of loading larger dimension images that one might require on a desktop). in addition, other built in features include right-to-left support to easily allow you to switch copy so it reads right to left, as well as built in pricing tables. foundation has all these features, plus most of what bootstrap contains, and as a result is often seen as the go-to framework for intermediate to professional web developers. find out more about foundation . pure.css one of the largest gripes of developers using bootstrap or foundation is the amount of bloated markup these contain. there are thousands of lines of css and javascript, and chances are, you’re only going to tap into and use a small proportion of this. pure.css, referred to just as ‘pure’, combats this problem with its minimalistic take on development. as the name suggests, this framework is purely css (ie. no javascript). to use it, it’s as simple as including one css file in your web site. pure has many different elements that can all be taken and consumed, or you can decide which elements to take and remove the rest, therefore keeping markup bloat to a minimum. pre-developed elements include a robust responsive grid system to work on, much like bootstrap and foundation, as well as form styling, buttons, tables, and menus. find out more about pure . which framework should i use? there are so many frameworks to choose from. we’ve listed three above, but there are even more, some more well known than others. often, the choice comes down to personal preference. my own preference would always be to choose bootstrap or foundation, purely because i know this sets me up well to work on tens of thousands of other web sites. should i find myself in a position where i takeover a web site from another developer, there’s a high chance that developer will have used bootstrap or foundation. when deciding between bootstrap and foundation, i often assess the features i know i’ll need for each particular web site. for example, an arabic language web hosting site full of pricing tables is going to push me straight towards foundation for its right-to-left and pricing tables support. a basic brochure web site for a customer looking for something quick and simple with minimal fuss is going to shift me more towards bootstrap, safe in the knowledge that bootstrap’s components provide a solid and complete base with which to tweak and amend. my advice would be to try them all over time and learn them well so you can pick up the correct framework based on your needs for each project. should i even use a framework? it almost feels wrong to ask this question at the end of an article talking about the benefits of individual frameworks, but it’s a question often asked amongst the development community, and ultimately, like all things frameworks, it’s purely personal preference. if you have the time and inclination to write responsive break points and develop a grid system each time you develop a new web site, and you prefer to write your own markup for drop down menus and fly-out responsive menus, then my advice wouldn’t be to use a framework. however, i’m almost certain that if you do choose to write all those from scratch, once you’ve done it more than twice you’ll start to save them separately as components to use in future projects. and suddenly, by doing this, you’re starting to build your own framework. ultimately, all frameworks are powerful tools to improve our output as developers, whilst helping us to maintain a common structure. they’re an excellent way to quickly and easily develop powerful, user friendly responsive web sites. whether you develop your own components and have these quickly to hand, or you use a common, public access framework, our jobs as developers are now a little easier thanks to people trying to work smarter, not harder. the following two tabs change content below. bio latest posts jamie harrop jamie harrop is a uk based e-commerce manager, front-end developer and writer with 14 years e-commerce and freelance experience. latest posts by jamie harrop (see all) an introduction to a/b and multivariate testing - april 6, 2016 an introduction to frontend frameworks - february 2, 2016 categories web development post navigation the best resources for learning c++ the best resources for learning java 1 thought on “an introduction to frontend frameworks” prodesigntools february 4, 2016 at 3:07 pm | reply very thorough coverage and well-written – this is an excellent and helpful article. thanks! leave a comment cancel reply commentname email save my name and email in this browser for the next time i comment. recent posts interview – cameron james from anymail finder the best standing desks 2020 – detailed buyers guides and reviews how to make money as a kid in 2020 – 6 to 16 years old how to write a blog post – a guide for new & experienced bloggers best social media management tools 2020 categories amazon fba blog traffic blogging business cheat sheets content marketing design tips email marketing graphic design interviews make money online marketing photography questions social tech buying guides web development website cms wordpress best of the blog online business ideas that work how to build an amazon affiliate website best affiliate marketing platforms best blogging sites 103 ways to make money online create a professional email address best social media management tools affiliate marketing glossary what is a blog? free web hosting latest hosting reviews best vps hosting best magento hosting best cloud hosting best dedicated hosting cheap vps hosting hosting coupons best uk web hosting best web hosting for australia cheap web hosting cookie policy privacy policy site builder reviews shopify review squarespace review weebly review wix site builder review duda website builder review site links affiliate disclaimer cheat sheets tutorials and guides black friday / cyber monday © 2020 make a website hub