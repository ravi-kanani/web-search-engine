skip to content wordpress tavern · wordpress news — free as in beer. search for: open menu navigation about contact comment policy news opinion plugins themes events block-based themes and the problem with dynamic data in html templates justin tadlock · march 19, 2020 · 31 comments the gutenberg project and its eventual full-site editing feature is coming upon a major issue that will need to be solved. block-based themes of the future are currently on a path toward a template system that will comprise of plain html files. while that will work for the majority of a theme’s output, the trouble is figuring out how the project will handle dynamic values. most of the discussion has centered on handling urls, which are probably the most common use case. currently, theme templates have all sorts of dynamic content. much of that will be replaced with blocks as we continue moving toward full-site editing. however, not all dynamic data will have a block equivalent. a good example is that theme authors cannot currently add the homepage url to the navigation block. some experimental block-based themes are using a simple / character, which points to the wrong location on many wordpress installs. solving this issue sooner rather than later is important for the progression of theme development in a block world. however, such a solution needs to be carefully crafted so that the theming community is not bogged down by a decade or more with a poor templating implementation. the current proposals the gutenberg repository currently has an open ticket for discussion on handling dynamic values in templates. at the moment, there are four proposals on how to address the issue. on-the-fly string replacement one solution would be to use php to parse each html file and replace strings representing dynamic data on the fly. this would require parsing all of a theme’s templates on every page load. the downside is that it would slow down the page load. we would need real unit tests to see how much of a spike in loading time this method creates. assuming a mustache-like syntax, templates would have values such as the following image output: <img src="{{ theme_image_example }}" /> one added benefit of adopting such a solution is that wordpress could automatically escape these dynamic values by default. this would be a boon to theme security, which is one of the biggest issues faced by the theme review team. one-time string replacement the second solution proposes using the same method but parsing the html files once, upon theme activation, and replacing dynamic values with proper values. the largest benefit of this method is that the parsing would not affect front-end loading speed. this method is problematic because it does not account for changes to templates after the initial parsing. it also does not handle scenarios when a value changes via user input. for example, a user may decide to change the location of their blog posts page. therefore, a parsed url that becomes static would point to the wrong location. templates as json a third solution proposes the idea of turning theme files into json. it is far easier to parse and extract data from a json file than and html file. however, theme designers do not write json to build template output. html exists for a reason. this solution would raise the barrier so high for new theme authors that it would be rare for those who just learned basic css and html to get into wordpress theme development. this idea is so foreign to the idea of template design, that it should not be a serious consideration. templates that return blocks via php the fourth and final proposal is to use php files with a function that returns a block template. this method would be straightforward and could be picked up easily for existing theme authors who have a familiarity with php. a template would look something like the following: function my_theme_front_page() {
	return '<!-- wp:cover {"url":"' . get_template_directory_uri() .'/block-background-image.png","id":273,"dimratio":0,"minheight":647,"align":"wide"} -->';
} this idea puts more focus on php than html. it would be the easiest-to-implement solution for the gutenberg development team. however, like the json method, it would raise the barrier to entry for first-time theme authors. it will mean making sure quote and double-quote characters do not get mixed up. the method would be prone to bugs and looks alien to modern-day templating. templating should focus on html templating should always be html-first. even in our current theme system, theme authors can build beautiful, safe, and functional themes by simply knowing html and css. php is secondary, especially when it comes to the templating aspect. our templating system relies on knowing html and plugging in a few template tags, which are php functions that wordpress provides for dropping in between html tags. this simplicity is, in part, what made wordpress theme development so easy to learn for anyone willing to put in a little time. block-based themes have the potential to drop the barrier even lower than our current templating system. however, templates as json or php functions runs counter to that. any solution that pushes us farther away from the basic building blocks of the web, html, should not be on the table for discussion. it may be time to adopt a proper php templating engine. there are plenty of examples out there. twig, blade, smarty, and others have existed for years. those also have some barrier to entry in the form of new syntax, but this should be no tougher than learning to plug template tags into the current system. at the very least, we will need to figure out a solution for handling dynamic data in what is essentially static html files. share this: click to email this to a friend (opens in new window) click to share on facebook (opens in new window) click to share on twitter (opens in new window) click to share on telegram (opens in new window) click to share on whatsapp (opens in new window) click to share on pocket (opens in new window) click to share on reddit (opens in new window) like this: like loading... posted in development, opinion tagged gutenberg 31 comments lee shadle march 19, 2020, 5:39 pm · reply interesting post justin. it doesn’t seem too far-fetched to me that that at some point theme author’s are going to have to start dipping their toes, feet, legs deeper and deeper into learning how to build blocks for the new editor. which means learning a lot of javascript and subsequently json. being primarily a frontend wordpress dev specializing in javascript and react, i am very biased, but i have to believe if we’re moving toward block-based themes, why wouldn’t we go all in by using templates as json? loading... report neil murray march 21, 2020, 4:29 am · reply json based theme templates could take wordpress themes forward to a much better future. excluding this option from serious consideration ( as suggested) is just not appropriate & i’m confident the gutenberg team won’t do that. loading... report justin tadlock march 26, 2020, 4:34 pm · reply the barrier to entry is why i do not think we will or should move that direction. burdening first-time theme authors with learning how json works as opposed to basic html, which they will likely already be familiar with, would mean that only more advanced developers would be building themes. wordpress has always had a low barrier to getting into theme development. it has long been a part of its recipe for success. i’m not sure if moving away from that would be beneficial for the project. now, if the suggestion is that we move 100% into visual theme building and away from hand-coding them, that may change. loading... report mike schinkel march 19, 2020, 5:51 pm · reply “it may be time to adopt a proper php templating engine.” there are those who say php is a proper templating engine. to which i generally agree. “it will mean making sure quote and double-quote characters do not get mixed up. “ if more wordpress developers would embrace heredoc syntax in php, this would be far less of an issue. #jmtcw btw, our team is currently building a solution in gutenberg that leverages php for generating dynamic content for which we need to be feature complete by end of march. wish us luck… loading... report justin tadlock march 20, 2020, 10:45 am · reply good luck on the project! and, good points too. there are those who say php is a proper templating engine. to which i generally agree. i actually started this entire post off as a discussion about this but decided to go in a different direction as i continued diving into the piece. i tend to agree and have been one of those devs who has pushed back a bit against adopting any sort of templating engine. with that said, i have come around on the idea a bit more in the past couple of years on some projects. i do think it’s worth evaluating while we’re changing the template system around. loading... report in reply to justin tadlock mike schinkel march 20, 2020, 6:32 pm · reply thanks justin. yeah, i’m certainly not religious about php vs. templating engines. but then again… so we are ripping out the use of mustache for php and replacing with pure php. why? debugging mustache is like flying in the cargo hold vs. debugging php with phpstorm or vscode is like flying first class. when using mustache — which is admittedly worse that using templates that support logic — you have to populate an array of arrays and stdclass objects for damn near every permutation you can imagine, and it ends up being a maintenance nightmare.thirds, and admittedly by far the least important in most cases is performance. using templating can be slower than just doing it in php, unless the templating system has a compile to php option and you can implement a build process into your workflow. yes, i know there are techniques to improve #2 but given #1 we felt it was better to just go back to php. i am just posting this as a cautionary tale for anyone who considers using a templating language. better to know this and still choose to use a templating language than to not know this, commit to using a templating language on a larger project, and later become surprised with these issues after it is too late to reverse course. #fwiw. #ymmv -mike p.s. if phpstorm were to implement a single-step debugging and variable inspection feature for one or more templating engines, i might change my tune completely. loading... report in reply to mike schinkel mike schinkel march 20, 2020, 6:35 pm · reply your kses stripping out my ordered list! here it is again: debugging mustache is like flying in the cargo hold vs. debugging php with phpstorm or vscode is like flying first class. 2. when using mustache — which is admittedly worse that using templates that support logic — you have to populate an array of arrays and stdclass objects for damn near every permutation you can imagine, and it ends up being a maintenance nightmare. 3. third, and admittedly by far the least important in most cases is performance. using templating can be slower than just doing it in php, unless the templating system has a compile to php option and you can implement a build process into your workflow. loading... report jake hawkes march 19, 2020, 7:20 pm · reply for the love of god, drop underscores and move to roots. the only thing that has kept me from using roots is widespread adoption as a ‘standard’. blade based components align with the block model, or am i missing something. loading... report ali march 20, 2020, 4:21 am · reply you aren’t missing anything mate. this gutenbergization of wordpress is nothing but turning it into something similar to laravel cms with “wordpress backend”. it is not going to be laravel neither wordpress. justin is right about the issues facing the gutenberg blocks but i think he is forgetting that the popularity of wordpress lies behind mass adoption by people who don’t know how to code at all. wordpress was, install it in few clicks engine. but now, its getting more and more complex as even the template companies and individual designers have to learn javascript to make a simple text appear on front-end in this block crazy wordpress world. anyhow, back to the topic. i think they should take some bits from amp-bind & amp-form relationship that makes it easier to use dynamic data in amp. it might be the easiest solution to the problem written by the author. amp-bind might be the answer. loading... report in reply to ali justin tadlock march 20, 2020, 10:53 am · reply that was my point in the article. wordpress’ low barrier to entry helped it gain popularity. even on the theme development side of things, that barrier only required some rudimentary html, css, and copy/paste skills. that meant a whole lot of the users who did not know how to code eventually found a path toward becoming a developer. in the past decade, it’s become tougher to get into something that was once as simple as building a basic theme. but, the upcoming block-based theme system can be our chance to recapture some of that simplicity if we do not venture too far away from the basics. loading... report in reply to justin tadlock cathy tibbles march 20, 2020, 11:11 am · reply that’s exactly how i got into it 11 years ago. i didnt even know html. loading... report in reply to justin tadlock andy march 26, 2020, 2:40 am · reply “in the past decade, it’s become tougher to get into something that was once as simple as building a basic theme. but, the upcoming block-based theme system can be our chance to recapture some of that simplicity if we do not venture too far away from the basics.” this. loading... report david mccan march 19, 2020, 8:28 pm · reply twig is not too difficult to understand and implement and it seems flexible. you just reviewed the meta box views extension that uses twig to create theme templates. adopting twig makes sense to me. loading... report cathy march 19, 2020, 8:58 pm · reply is there a basic explanation of the premise here? i dont understand the issue of dynamic content in themes… we build blocks and use php to get dynamic content. the user puts those blocks wherever s/he likes… how does that change with theme dev? loading... report justin tadlock march 20, 2020, 11:01 am · reply not all theme output is controlled by the user. and, if/when we do get to a point where the user can change anything on the front end, theme authors still need to be able to set defaults. one example provided in the post is the navigation menu. let’s say a theme adds a nav menu block to the header. it may want to populate that with a few links. one of those links might be a “home” link. currently, that requires the theme use the home_url() php function. however, because templates are html, we are not running php. therefore, the function would not work. we need a method of correctly outputting that url. another example might be adding a cover block to a custom front page template. the theme author will likely want to include a background image for that cover block. right now, with html templates, the only way to use an image for that block is to do so with a static url. instead, theme authors need to be able to point to the correct image url within the theme. i hope that helps explain a bit more. there’s a whole host of similar scenarios that require dynamic values. loading... report in reply to justin tadlock cathy tibbles march 20, 2020, 11:14 am · reply thank you! i didnt realize going to gutenberg themes meant html strictly… i suppose i’m used to combining html/php in php files. loading... report in reply to cathy tibbles justin tadlock march 20, 2020, 12:24 pm · reply i meant to link to an earlier post, initial documentation for block-based themes proposed, that explains how they will work. of course, so much of this could change in the coming months. i just went back and added the link into the post though for reference. some other posts that might be worth digging into that touch on the subject: key takeaways from the future of themes meeting get involved with block-based theme experiments loading... report henner march 19, 2020, 10:51 pm · reply as someone who uses timber library that adds twig parser to wordpress, i hope they can adopt it. they seem to be concerned about confusing first-time theme author, but the posts loop is one of the most confusing thing in wordpress when i started learning. twig can solve that. loading... report anh tran march 20, 2020, 6:40 am · reply adding dynamic data to gutenberg will be one of the best thing ever happened to the plugin. it will allow developers to connect with different data sources and expand the use of gutenberg for other purposes. i probably vote for the on-the-fly rendering. with a proper cache layer and lazy-load method, we might make it work without affecting the performance. using a template engine might work, but i don’t think wp will do that. it’s too much for this. and it might affect the whole theme ecosystem and will introduce another way to build themes (which is confusing). loading... report álvaro march 20, 2020, 9:45 am · reply it’s strange to see this issue dealt with more than a year after gutenberg was merged, and a lot more than two years into the project. i mean, dynamic data is an essential part o wordpress, imo. loading... report helgerson march 23, 2020, 7:04 am · reply exactly this. should have been solved at initial concept stage years ago. now lots of breaking changes will have to be added, again and affect millions of live websites… loading... report justin tadlock march 23, 2020, 4:23 pm · reply it wasn’t a key issue that needed to be solved while the block system was simply a content editor. however, as it moves into being a full-site editor that is merged with the theme template system, it becomes a hurdle that must be cleared. loading... report cfc march 20, 2020, 2:15 pm · reply gutenberg blocks are jsx-based. in the interest of consistency, it seems like templates should be written the same way. loading... report rod olman march 21, 2020, 2:17 pm · reply one would think that this could easily be solved by shortcodes, which already exist and are in wide use. loading... report riad benguella march 21, 2020, 2:38 pm · reply i think there’s an important missing piece in this conversation that seems to have gone into a battle between templating engines. one of the key features is being able to save/tweak/fork and share the templates visually (using the block editor). another missing piece is that the html as written today is already dynamic. blocks are dynamic. there’s no difference between a block html comment and say a twig token, both can augment html with dynamic features, the difference is that the blocks comments can be edited visually while for the twig tokens, you need to write code. does this mean this issue could be solved by just having some “inline blocks” or “inline tokens” that the editor can understand somehow, maybe? maybe not? i don’t have a precise answer now, but editing capabilities is an important piece of the puzzle. loading... report justin tadlock march 23, 2020, 4:19 pm · reply yes, it’s unfortunate that we veered too far over into discussion on templating engines. i thought it was important to bring up but didn’t want it to be the focus. mostly, i just want to get the ideas churning. i do like the idea of “inline blocks” or tokens or whatever. admittedly, it would seem a little odd to use the current block syntax inline. i’m not sure what that would look like if we go that route. anyway, interesting food for thought. loading... report carolann march 24, 2020, 3:43 pm · reply i’m confused. do i need to install the gutenberg plugin even though i have gutenberg running from wordpress? in another words, i have block plugins installed like stackable and really like but am confused as to weather or not i need the actual gutenberg plugin itself. thanks so much. loading... report justin tadlock march 24, 2020, 4:04 pm · reply do not worry about being confused. the terminology around the block editor and gutenberg often gets muddied. it may even be worth doing a post that dives deeper into this subject. but, here’s the short version: the editor you have running on your website since wordpress 5.0 is called the block editor. gutenberg is the name of the project and plugin where development of the block editor (and beyond) happens before it lands in wordpress. it’s basically a codename for the block editor project. when we talk about future features, these are things that are generally already in progress within the gutenberg plugin but not wordpress itself. you absolutely do not need to install the gutenberg plugin unless you want to test the latest features before they are in wordpress. i highly recommend using it because you will always have access to the latest and greatest features, sometimes months in advance. with that said, there are sometimes theme incompatibilities when running the plugin. the plugin is stable and not quite bleeding-edge, but you should keep in mind that sometimes things may break. we run the plugin here on wp tavern because i like to use the newest stuff. loading... report justin mayfield march 25, 2020, 12:01 pm · reply i’m a theme designer/developer but i work directly with end-users developing custom themes. i feel like i’m still missing something here. i’ve read posts linked from this one and other resources and still don’t understand why .html files in the theme folder are desired for gutenberg other than a strange notion to all of a sudden upheave the wp ecosytem for the sake of making theme development more accessible. if we’re going to do such an upheaval, we should go towards a modern app development workflow that most professional developers would benefit from (and make wp less of a cul-de-sac of a career pathway for aspiring developers). it’s funny that the working development branch is itself more in line with a modern workflow for the sake of the project devs. any way, why not continue with php files that are mostly html with php for dynamic content? if the proposal is for developers to work on the logic side of things in the wp admin, that sounds terrible–especially if there is no backwards compatibility for the current theming system. as an aside, for my work, the block system is nearly pointless altogether (especially with acf as an option). i never want to go through the trouble of designing a site just to empower my client to severely diminish it (which, anytime they go about rearranging the layout, is nearly 100% likely). empowering the client to change content, not change design is our motto. honestly, any time i setup a third party theme for a client on a budget, i always stick with the thought-out demo designs from the theme developer. making a truly functional and beautiful design takes a lot of time and effort. even then, theme builders end up making it much easier for the end user to accidentally mess up a design, even when they’re just trying to change content. it’s also common for me to have clients that come to me after trying to “design” their site via some theme builder. they are usually frustrated and the results are lackluster, to put it mildly. i get helping the seo/graphic designer-type of professional be more empowered to create themes on the open source side of wp. but apart from that, the entire gutenberg project seems like a way for automattic to compete with squarespace and geeky hobbyists to theorize about the democratization of the internet. both impulses are understandable, but how long can one codebase support these end-goals and the goals of professional developers? loading... report heinrich march 25, 2020, 2:06 pm · reply gutenberg devs obviously have “one-user-is-admin” sites in mind who spend time to fiddle around with the content again and again and update this and that every few weeks. in reality most sites are not like this. most sites are designed by some agency and clients have a limited author account or similar to upload a new menu pdf or change some opening hours maybe once or twice a year. those users will break everything if you allow them to use gutenberg as admin, not because they want to redesign things and can’t but just by accident. most clients invest an amount x to “have a website made”. they do not have nor invest another amount x for continuous required technical changes and theme updates and whatnot so some full site editing feature works with whatever plugins which they both will never really use. thats the problem. loading... report in reply to heinrich mikeschinkel march 26, 2020, 1:48 am · reply another perspective on gutenberg. gutenberg is an awesome foundation for a corporate website that allows a team of developers to keep the internal end user from screwing up the design but still provide the internal end user a tremendous amount of business flexibility to achieve their revenue goals. specifically, we are building a gutenberg-based framework to be used by many different similar websites as the business acquires similar businesses, keep the brands of the businesses they acquire, and then builds them a brand-specific website using our common codebase. we are building full-width blocks that their internal end users can drag and drop to create a quick page layout. we are giving the end-users about 10% as much flexibility as most “one-user-is-admin” wordpress site owners get so there is no way they can mess up the design. and you know what? it is working fabulously. simply put gutenberg is a great foundation for developers to build bespoke business-specific blocks to empower task-oriented end-users who just want to get their jobs done. and it keeps us from having to create our own ui for page building, and it keeps us from having to extend a 3rd party page builder that tries to do far too much and is thus overly complicated. #fwiw p.s. all that said, this is not an inexpensive approach. our project is probably well over six figures thus far. loading... report leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website notify me of follow-up comments by email. notify me of new posts by email. join the discussion via emailget only replies to your comment, the best of the rest, as well as a daily recap of all comments on this post. no more than a few emails daily, which you can reply to/unsubscribe from directly from your inbox. this site uses akismet to reduce spam. learn how your comment data is processed. recent comments henrico on finding balance in these uncertain times: remote work and sharing our strugglesdespite the threat of the coronavirus an… justin tadlock on finding balance in these uncertain times: remote work and sharing our strugglesbaby boomer is not a slur, and the term… patty on finding balance in these uncertain times: remote work and sharing our strugglesi just would love to never hear that now… justin tadlock on gutenberg 7.8 adds patterns api and continues interface cleanupwordpress 5.4 is not required, but guten… stephen vaughan on gutenberg 7.8 adds patterns api and continues interface cleanupas an alternative to placing in the func… trending gutenberg 7.8 adds patterns api and continues interface cleanup finding balance in these uncertain times: remote work and sharing our struggles block patterns will change everything block-based themes and the problem with dynamic data in html templates yoast publishes free online training course for the block editor how to add subscript and superscript characters in wordpress font awesome releases new covid-19 awareness icons subscribe via email enter your email address to subscribe to this blog and receive notifications of new posts by email. email address subscribe about wp tavern wordpress tavern is a website about all things wordpress. we cover news and events, write plugin and theme reviews, and talk about key issues within the wordpress ecosystem…read more → footer home archives write for us ask the bartender proudly powered by wordpress. twitter facebook instagram send to email address your name your email address cancel post was not sent - check your email addresses! email check failed, please try again sorry, your blog cannot share posts by email. %d bloggers like this: