skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / creating an editable site with google sheets and eleventy author david atanda 1 comment join conversation published mar 27, 2020 eleventy spreadsheet zapier personalized marketing with mailchimp remember tabletop.js? we just covered it a little bit ago in this same exact context: building editable websites. it’s a tool that turns a google sheet into an api, that you as a developer can hit for data when building a website. in that last article, we used that api on the client side, meaning javascript needed to run on every single page view, hit that url for the data, and build the page. that might be ok in some circumstances, but let’s do it one better. let’s hit the api during the build step so that the content is built into the html directly. this will be far faster and more resilient. the situation as a developer, you might have had to work with clients who keep bugging you with unending revisions on content, sometimes, even after months of building the site. that can be frustrating as it keeps pulling you back, preventing you from doing more productive work. we’re going to give them the keys to updating content themselves using a tool they are probably already familiar with: google sheets. a new tool in the last article, we introduced the concept of using google sheets with tabletop.js. now let’s introduce a new tool to this party: eleventy. we’ll be using eleventy (a static site generator) because we want the site to be rendered as a pure static site without having to ship all of the under workings of the site in the client side javascript. we’ll be pulling the content from the api at build time and having eleventy create a minified index.html that we’ll push to the server for the production website. by being static, this allows the page to load faster and is better for security reasons. the spreadsheet we’ll be using a demo i built, with its repo and google sheet to demonstrate how to replicate something similar in your own projects. first, we’ll need a google sheet which will be our data store. open a new spreadsheet and enter your own values in the columns just like mine. the first cell of each column is the reference that’ll be used later in our javascript, and the second cell is the actual content that gets displayed. in the first column, “header” is the reference name and “please edit me!” is the actual content in the first column. next up, we’ll publish the data to the web by clicking on file → publish to the web in the menu bar. a link will be provided, but it’s technically useless to us, so we can ignore it. the important thing is that the spreadsheet(and its data) is now publicly accessible so we can fetch it for our app. take note that we’ll need the unique id of the sheet from its url as we go on. node is required to continue, so be sure that’s installed. if you want to cut through the process of installing all of thedependencies for this work, you can fork or download my repo and run: npm install run this command next — i’ll explain why it’s important in a bit: npm run seed then to run it locally: npm run dev alright, let’s go into src/site/_data/prod/sheet.js. this is where we’re going to pull in data from the googlesheet, then turn it into an object we can easily use, and finally convert the javascript object back to json format. the json is stored locally for development so we don’t need to hit the api every time. here’s the code we want in there. again, be sure to change the variable sheetid to the unique id of your own sheet. 
module.exports = () => {
  return new promise((resolve, reject) => {
    console.log(`requesting content from ${googlesheeturl}`);
    axios.get(googlesheeturl)
      .then(response => {
        // massage the data from the google sheets api into
        // a shape that will more convenient for us in our ssg.
        var data = {
          "content": []
        };
        response.data.feed.entry.foreach(item => {
          data.content.push({
            "header": item.gsx$header.$t,
            "header2": item.gsx$header2.$t,
            "body": item.gsx$body.$t,
            "body2": item.gsx$body2.$t,
            "body3":  item.gsx$body3.$t,
            "body4": item.gsx$body4.$t,
            "body5": item.gsx$body5.$t,
            "body6":  item.gsx$body6.$t,
            "body7": item.gsx$body7.$t,
            "body8": item.gsx$body8.$t,
            "body9":  item.gsx$body9.$t,
            "body10": item.gsx$body10.$t,
            "body11": item.gsx$body11.$t,
            "body12":  item.gsx$body12.$t,
            "body13": item.gsx$body13.$t,
            "body14": item.gsx$body14.$t,
            "body15":  item.gsx$body15.$t,
            "body16": item.gsx$body16.$t,
            "body17": item.gsx$body17.$t,
            
          })
        });
        // stash the data locally for developing without
        // needing to hit the api each time.
        seed(json.stringify(data), `${__dirname}/../dev/sheet.json`);
        // resolve the promise and return the data
        resolve(data);
      })
      // uh-oh. handle any errrors we might encounter
      .catch(error => {
        console.log('error :', error);
        reject(error);
      });
  })
} in module.exports, there’s a promise that’ll resolve our data or throw errors when necessary. you’ll notice that i’m using a axios to fetch the data from the spreadsheet. i like the it handles status error codes by rejecting the promise automatically, unlike something like fetch that requires monitoring error codes manually. i created a data object in there with a content array in it. feel free to change the structure of the object, depending on what the spreadsheet looks like. we’re using the foreach() method to loop through each spreadsheet column while equating it with the corresponding name we want to allocate to it, while pushing all of these into the data object as content. remember that seed command from earlier? we’re using seed to transform what’s in the data object to json by way of json.stringify, which is then sent to src/site/_data/dev/sheet.json. yes! now have data in a format we can use with any templating engine, like nunjucks, to manipulate it. but, we’re focusing on content in this project, so we’ll be using the index.md template format to communicate the data stored in the project. for example, here’s how it looks to pull item.header through a for loop statement: <div class="listing">
{%- for item in sheet.content -%}
  <h1>{{ item.header }} </h1>
{%- endfor -%}
</div> if you’re using nunjucks, or any other templating engine, you’ll have to pull the data accordingly. finally, let’s build this out: npm run build note that you’ll want a dist folder in the project where the build process can send the compiled assets. but that’s not all! if we were to edit the google sheet, we won’t see anything update on our site. that’s where zapier comes in. we can “zap” google sheet and netlify so that an update to the google sheet triggers a deployment from netlify. assuming you have a zapier account up and running, we can create the zap by granting permissions for google and netlify to talk to one another, then adding triggers. the recipe we’re looking for? we’re connecting google sheets to netlify so that when a “new or updated sheet row” takes place, netlify starts a deploy. it’s truly a set-it-and-forget-it sort of deal. yay, there we go! we have a performant static site that takes its data from google sheets and deploys automatically when updates are made to the sheet. our learning partner need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. comments dan permalink to comment# march 27, 2020 this is just what i’ve been looking for david! many thanks for sharing. reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers