skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / design systems and portfolios author robin rendle 11 comments go to comments last updated mar 17, 2019 design systems personalized marketing with mailchimp in my experience working with design systems, i’ve found that i have to sacrifice my portfolio to do it well. unlike a lot of other design work where it’s relatively easy to present dribbble-worthy interfaces and designs, i fear that systems are quite a bit trickier than that. you could make things beautiful, but the best work that happens on a design systems team often isn’t beautiful. in fact, a lot of the best work isn’t even visible. for example, most days i’m pairing up with folks on my team to help them understand how our system works; from the css architecture, to the font stack, to the ui kit to how a component can be manipulated to solve a specific problem, to many things in between. i’m trying as best as i can to help other designers understand what would be hard to build and what would be easy, as well as when to change their designs based on technical or other design constraints. further, there's a lot of hard and diligent work that goes into projects that have no visible impact on the system at all. last week, i noticed a weird thing with our checkboxes. our checkbox react component would output html like this: <div class="checkbox">
  <label for="ch-1">
    <input id="ch-1" type="checkbox" class="checkbox" />
  </label>
</div> we needed to wrap the checkbox with a <div> for styling purposes and, from a quick glance, there’s nothing wrong with this markup. however, the <div> and the <input> both have a class of .checkbox and there were confusing styles in the css file that styled the <div> first and then un-did those styles to fix the <input> itself. the fix for this is a pretty simple one: all we need to do is make sure that the class names are specific so that we can safely refactor any confusing css: <div class="checkbox-wrapper">
  <label for="ch-1">
    <input id="ch-1" type="checkbox" class="checkbox" />
  </label>
</div> the thing is that this work took more than a week to ship because we had to refactor a ton of checkboxes in our app to behave in the same way and make sure that they were all using the same component. these checkboxes are one of those things that are now significantly better and less confusing, but it’s difficult to make it look sexy in a portfolio. i can’t simply drop them into a big iphone mockup and rotate it as part of a fancy portfolio post if i wanted to write about my work or show it to someone else. take another example: i spent an entire day making an audit of our illustrations to help our team get an understanding of how we use them in our application. i opened up figma and took dozens of screenshots: it’s sort of hard to take credit for this work because the heavy lifting is really moderating a discussion and helping the team plan. it’s important work! but i feel like it’s hard to show that this work is valuable and to show the effects of it in a large org. “things are now less confusing,” isn’t exactly a great accomplishment – but it really should be. these boring, methodical changes are vital for the health of a good design system. also... it’s kind of weird to put “i wrote documentation” in a portfolio as much as it is to say, “i paired with designers and engineers for three years.” it’s certainly less satisfying than a big, glossy jpeg of a cool interface you designed. and i’m not sure if this is the same everywhere, but only about 10% of the work i do is visual and worthy of showing off. my point is that building new components like this radiocard i designed a while back is extraordinarily rare and accounts for a tiny amount of the useful work that i do: see the pen gusto app – radiocard prototype by robin rendle (@robinrendle) on codepen. i’d love to see how you’re dealing with this problem though. how do you show off your front-end and design systems work? how do you make it visible and valuable in your organization? let me know in the comments! our learning partner wanna be a better designer? css-tricks own sarah drasner is a heck of a designer, and has a wonderful course design for developers over on frontend masters where you'll learn to be a self-sufficient designer. wanna be a better designer? css-tricks own sarah drasner is a heck of a designer, and has a wonderful course design for developers over on frontend masters where you'll learn to be a self-sufficient designer. comments brad kemper permalink to comment# march 15, 2019 a little off-topic, but why not just have div.checkbox and input.checkbox selectors in your style sheets to select the right ones, without having to change your html? especially since you had to go back and update the css anyway. alt_ux permalink to comment# march 15, 2019 good point. perhaps the other method is more bulletproof for a system? ben permalink to comment# march 18, 2019 because you increase specificity: 1 class is easy to override, a tag plus a class is harder. and if for some reason one day you turn your <div> into a <span>, you have something more to change. the best practices i’ve seen since years now tend to decouple html tags and styling, so tags are for html markup, structuring the document, while classes are there to apply styling. my policy is always try to touch things the less you need to actually obtain what you want. leave them be as much as you can. danny permalink to comment# march 15, 2019 enjoyed post. ime, the real value proposition of design systems is solving problems at scale (and in large orgs this is more of a organizational challenge than a technical one). a methodical and predictable path is the way to go! almost all snippets on portfolio builder showcasey “bin” sites hardly resemble enterprise app dev. at all. david kidger permalink to comment# march 16, 2019 video/screencast yourself taking through your process. it takes some practice, but i’ve had genuinely good reactions to it around new projects. in fact, i make a point of not having a portfolio, and tailor my videos to each new project, relating it specifically to the client, and what may be a good approach for the project they’re interested in engaging me for. internally it can work as well. once you get good at it they don’t take long to do, and you can explain in a short video the reasons why you approached things the way you did, and redo them if anything significant changes. documentation tends not to be read/reviewed. and just showing the ‘pretty stuff’ does belittle all of the hard work you’ve rightly pointed out is really the heart of maintaining such systems and approaches. raphael permalink to comment# march 16, 2019 i am currently building my portfolio. most of my work is non-visible work: planning, coordination, communication, discussion, analysis, etc. i decided to build up these projects more like a case study. i try to reduce the text to one sentence per visual. the visual would be a diagram related to a step, or an outcome. at the end i add one or two images of the result. the structure for a single project page would be: 1) title, 2) one or two words describing my role in the project (i.e. research, or project coordination), 3) short project description, 4) short paragraph summarising project execution, challenges, explaining my role in the project, and also crediting other parts of the team, 5) visualisations of steps (project-specific approaches, solutions to challenges), and finally 6) visible results from the project. the entire structure is based on story-telling. i think it’s also important to recognise that some visitors may not read any text beyond project title and associated keywords (see 2), which means that the visuals (in their specific order) should be self-explanatory to a certain degree. another implication of this approach is also that individual project pages may need slightly different layouts, as the complexity of the content requires a page layout that goes beyond a simple image gallery – going with the story-telling idea, visuals may have different sizes and are arranged in a manner that supports understanding. johan permalink to comment# march 16, 2019 as a design manager in a hiring position i would value this kind of work above a bunch of shiny jpgs to be honest. zack permalink to comment# march 16, 2019 hi robin we use a change log. it will help maintaining the code base and also shows all changes that a commit or merge touched. saioa permalink to comment# march 18, 2019 hiii everyone i enjoy a lot the kind of work you explained in your post. i am a front-end developer and i create html and css layouts, i am not doing the design part, and sometimes it is very hard to make designers and programmers understand the importance of being methodical and to build things with components in mind. my team mate and i are the persons that take the extra work of creating html+css components, to build a design system and a documentation, and to “fight” with more that 40 programmers and 3 designers, so that they create the tons of pages that the website needs with all this in mine. i love it but it is exausting and frustrating sometimes, and i think our work it is not well valued ;))) shaun mosley permalink to comment# april 16, 2019 thanks for the write up! i’m battling this same struggle right now. not sure how i’ll solve this, but i’m working on the best way to tell this story. guess i’ll be back to share and learn. andrey permalink to comment# july 1, 2019 enjoy this post a lot since i am thinking to add a similar ds case to my portfolio. do you guys know any good examplew of ds case? this comment thread is closed. if you have important information to share, please contact us. related how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers