skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / design v17 author chris coyier 20 comments go to comments published jan 14, 2019 design redesigns personalized marketing with mailchimp we rolled out a new site design on january 1! this is the 17th version of css-tricks if you can believe that. the versions tend to evolve a decent amount beyond the initial launch, but we archive screenshots on this design history page. like i said in our 2018 thank you post: this is easily the most time, effort, and money that's gone into a redesign since the big v10 design. there are a lot of aesthetic changes, but there was also quite a bit of ux work, business goal orientation, workflow tweaking, and backend development work that went along with it. this is a big one! the reception so far has been pretty great, but please know that we'll be refining it and squishing a lot of bugs here in the early days. here are some notes about who was involved, how it happened, and things to notice. kylie led this project kylie timpani was the lead designer and really whole project lead on this. i first reached out to her in april 2017, we chatted in may, and kicked off the work in june. from my perspective, this was a pretty casual process, as i had no particular deadlines and fairly loose goals. let's make an attractive site that does better in all ways than we do them now. kylie was super organized and had a very thoughtful process around every aspect of this. just in the first block of time that kylie allocated for this project she: took a complete content inventory dug into analytic data to understand users, traffic, and usage at a high level created, distributed, and analyzed a reader survey to understand readers better and answer specific questions she had for them chatted with all the staff members of css-tricks to understand their roles, workflows, and ideas kylie's obviously not the kind of the designer that just whips open a design tool and starts noodling around. as great of a visual designer as she is, the work was highly informed. she went on to speak with our advertising agency, clearly identify the site's current strengths and weaknesses, and do light wireframing. i've been using figma for visual design stuff, and kylie was happy to use that as the design tool. that was nice since we both have team level access and were able to use it collaboratively. for me, it was mostly useful for being able to see and reference everything, and make notes on the designs. we also used asana to track what was being worked on and ultimately as a place to track bugs and places where the design implementation needed attention. thanks so much, kylie for all your excellent work on this project! if anything is a bit off or buggy about the site, it's my poor implementation. and good luck! ‚§µÔ∏è ‚ö°Ô∏è so! speaking of big life changing news... in just a couple of weeks i'll be moving to san francisco! i'm so so excited to be joining @nrrrdcore and her truly incredible team over at apple! üë©üèª‚Äçüíª‚ú® ‚Äî kylie timpani (@kylietimpani) january 7, 2019 design stuff i'll let y'all explore the design for yourself to find all the little touches we put in, but i'll give a shout out to a few of them where there is a technical detail you might enjoy. orange-to-pink clearly, we went all dark mode on this design. it's nothing to do with the new media query, although that reminds me we might consider alternations for those who specifically set prefers-color-scheme: light;. the brand/accent/action colors are orange and pink, which looks quite striking against the darkness but works on light backgrounds as well. i made a quickie little sass @mixin that allowed me to use those colors (with variations, if needed) at different angles as backgrounds: @mixin orange-to-pink($deg: to right, $col-1: $orange, $col-2: $pink) {
  background-image: linear-gradient($deg, $col-1, $col-2);
} and on text as well wherever we needed (most often as for :hover and :focus): @mixin gradient-text() {
  background: linear-gradient(to right, $orange, $pink);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
} we also needed the gradient to be applied to fills and strokes in svg, so i plopped that into the document to use wherever it was needed. <svg width="0" height="0" class="visually-hidden">
  <defs>
    <lineargradient id="orange-to-pink" x1="0" x2="0" y1="1" y2="0">
      <stop offset="0%" stop-color="#da1b60" />
      <stop offset="100%" stop-color="#ff8a00" />
    </lineargradient>
  </defs>
</svg> fixed header there is something about headers that always bring out more complexity than you might expect. i recently went through this with the new codepen header/sidebar and it as complicated for this site. part of what complicated this one was: it has its own set of unique breakpoints. the header is pretty full, so the breakpoints are pretty specific and unique to it. we wanted a fixed-position (but minified) header that showed up as you scroll down. when you're logged in, there is a wordpress admin bar also fixed to the top of the page. i wanted to accommodate for that. at one point, it was getting pretty messy and i wound up deleting all the css for the entire thing and re-wrote it, taking all the states into consideration, and writing media queries that used logic to clearly specify styles in each of those states. the idea of a not-always-fixed-position header is interesting in and of itself. it means that: you need to determine when to apply the fixed position you need to make sure the shift from not-fixed to fixed (and back) doesn't cause layout shifting i was dead nervous about attaching an onscroll listener and doing math and such to determine when to do the switch. i'm sure it can be done responsibly, but i haven't had great luck with that. instead, i placed a tiny one-pixel element to the screen and attached an intersectionobserver to it and reacted to that. that gave me the power to adjust where that is in css, which was a nice little touch. here's the very basics of that code: see the pen fixed header with intersectionobserver by chris coyier (@chriscoyier) on codepen. mixup one very cool feature of this design is the mixup area on the homepage. it was one of kylie's ideas to show and remind people of the variety and depth of content that is here on css-tricks. the line that goes through it needs to depend on the height of the html content in each of those boxes. the boxes are set on a css grid, but they can and should still expand as needed for titles and such. rather than try to svg this somehow, the line is essentially stitched together though border and border-radius on individual boxes. to make it line up, i occasionally had to nudge them around with transform. there was some z-index involved too. it was fun making mistakes along the way: cards i'm kinda in love with native scroll snapping. the cards kinda have a fun animation on desktop, revealing the entire card on hover/focus, and then on mobile you can see the whole card, but are easy to thumb through: thanks, amelia! the design called for these curved line separators: i have a small degree of confidence with the svg path syntax, so i took the first crack at it. i was able to design it in a way that it could draw that line ok and keep the stroke at the desired width, but it didn't scale quite right. see the pen lighted path by chris coyier (@chriscoyier) on codepen. i brought in svg expert amelia bellamy-royds to help me get it right. feel free to inspect the site to see how it was done. it involves masking and nested svgs and rectangles and transforms and all sorts of fun stuff. amelia actually created four variations of the code and carefully noted all the pros and cons of each one. ultimately, we went with this: see the pen lighted path by amelia bellamy-royds (@ameliabr) on codepen. another thing amelia helped with was the "circle of text" design element. kylie had these instances mocked out and i thought they were so cool and i definitely wanted to pull it off. there is a really elaborate way to do it by splitting the characters in to spans and transforming them, but that's a bit messy compared to svg's <textpath>. i knew i wanted to go the svg route, but perhaps abstract it away into a reusable component so that it wasn't a heaping pile of code every time i want to use one. it occurred to me that a web component might be the best way to go here because i can kind of invent the api myself. what i wanted a circle-of-text component to do: pass in the text to set on the circle declare the radius of the circle rotate the circle so i can start the text at any point along the circle that makes perfect sense as a web component: <circle-text r="3em" rotate="-90deg">
  css is super fun & cool & i like css!!!
</circle-text> my expertise with web components is limited, so i reached out to amelia again who is great both with web components and svg‚Äîa perfect match! this is what she was able to do, which i easily integrated easily into this design. thanks, ana! another design thing that kylie cooked up that i was a bit perplexed by was this line: i thought maybe svg again, but i really wanted to nestle regular html content in there nicely. i was hoping to pull it over with borders or something css-y. i reached out to ana tudor who is fantastic at tricky design situations and solving them with native browser tech. ana was able to whip up a good solution here using multiple gradient backgrounds in the main area and a border for the top right bit that flies off. see the pen nav by ana tudor (@thebabydino) on codepen. thanks, zach! fonts are a unique part of the loading experience of websites in that their presence (or lack of), how they appear, and how they change all play major roles in the perceived performance of the page. i've had the good fortune of being able to chat with zach leatherman about font loading before, but i still don't feel entirely comfortable with what the best practices are in any given situation. for this design of css-tricks, i made the call to use the system font stack for most of the body copy. that has the major benefit of being instantly available to render and aesthetically seems to work well on a technical site, not to mention generally pairing well with rubik, our header font. but we still needed to deal with rubik. there will be an upcoming article from zach going into this in more details, but the gist is: create a minimal subsetted version of rubik that handles the majority of usage <link rel="preload" ... > it use it with @font-face using font-display load a more robust version in an async second stage nice job everyone that worked on the @css relaunch! look at those web fonts showing up on that 2.09s fast 3g first render üéâ (full disclosure i helped a wee bit with the font loading here üòá) pic.twitter.com/ih7zjhelqq ‚Äî zach leatherman (@zachleat) january 1, 2019 some areas of the site are somewhat deprecated the forums is such a complicated area of the site to design and maintain, what i've done is just loaded the default bbpress styling for them, instead of trying to override things or start from scratch. i think that'll be the best route going forward. there is a gallery section of this site, but i'm not even linking to it anymore as we didn't really keep it up to date very well nor did it get used much. the url's still work though. maybe it can make a return someday, but for now, i'm enjoying the reduction of some technical and content debt. tech stack it's somewhat boring. it's about the same thing i've done forever. it's a stock install of wordpress with a custom theme, a dozen or so plugins, and a bit of custom-coded functionality, like having the images powered by cloudinary. it's running on a custom media temple-built box so it can have php 7 and mysql 5.6, plus a firewall that also acts as a cdn. it's nice to have a pretty snappy foundation, so it's on me as a front-end dev to keep it that way. i used svg for the icons, sass for the styling, and babel to write jquery-based functionality in es6. i wrote up a gulp file to do all that processing and run the local browsersync dev server. local wordpress via local by flywheel. i'm actually pretty happy with the stack as it felt quick and productive to me. but i admit, part of me wishes i dug a little harder into new tech, like building webpack-based processing or trying to go all-in on a server-rendered and react-powered headless wordpress via graphql kinda thing. the reason i didn't is because boring has served me so well and time is a major factor since i'm developing alone (my budget doesn't exactly make available a whole development team). my guess is a major front-end infastructure overhaul would have tripled the dev time for questionable benefits. it still sounds like fun and might open up future doors, but hey, another time. my last regret is that i wish i had spun up a real pattern library system from the start. i think i did ok in breaking things up into reusable parts, but the site isn't truly componentized. as i approached the finish line, i started to see how this could have gone a bit smoother for me should i have worked with true components that accepted data and had variations and such. native php isn't great for that, so it would have forced me into some kind of templating system, and i probably wouldn't have regretted it. if i stay in php next time, maybe i'd use something like timber and twig for all the components, and then fractal for the pattern library since it supports twig. i kind of dig the way timber abstracts the data stuff from the views. i hadn't heard of this app until now, but check out project wallace: project wallace is a project aimed at gaining insights in your css over a longer period of time. it started a couple of years ago as a frustration with existing css analyzers that only do a one-time only analysis. as time went by, more and more features were added and now wallace is place to go for developers who want to know if their complexicity has increased or for a designer who wants to know if all the correct colors and fonts are being used. bart veneman set it up to watch css-tricks, and you can see a before/after comparison and charts over time. bart blogged about the numbers for us as well. thanks bart! there are more interesting stats in that blog post. codepen embeds the true usefulness of codepen embed themes came out here. the whole point of an embed theme is that you can use them to match the design of where the pens will be embedded, and if you need to change that design, you can change them all in one fell swoop. there are probably thousands of embedded pens on this site, and they all got updated at once with one theme change. there are a few special things that i've done with codepen embeds on this site: the are resizable from the bottom right corner. used jquery. like this. they have a placeholder height. when you embed a pen, you can choose how tall you want it to be. that's how tall the <iframe> will come in as. but i've adjust it so that the <p> that is there before the iframe comes in will be that same height, so there is no reflow jank. i regex'd that sucker myself like this: function codepen_reflow_fix($content) {
  $content = preg_replace('/data-height=(\'|")(\d*)(\'|")/', 'data-height="$2" style="height: $2px;"', $content);
  $content = preg_replace('/data-theme-id="\d*"/', 'data-theme-id="1"', $content);
  return $content;
}
add_filter('the_content', 'codepen_reflow_fix', 10); we're gonna bring that feature to codepen itself real soon. notice in that regex above i'm also forcing the theme id. that way, all embedded pens definitely have the correct theme, even if we forget. achievement unlocked: the custom scrollbar is the new feature that everyone either loves or hates if there has been one constant in every css-tricks design, it's that there's at least one feature people either love or hate. this time, i'm happy to announce it's the custom scrollbar. in a sense, it's for myself. i manually use scrollbars quite a bit and it feels both fun and highly usable to grab onto this big beefy chunk of pink love. it's also a little inspired by vs code, which features a pretty beefy scrollbar itself: there are general usability considerations about custom scrollbars for sure, but i don't feel like they've been breached too heavily here, if at all. i've heard some "don't mess with my browsers ui" feedback, which i sorta get, but does that mean we shouldn't style any form controls, or even use css at all? (lol.) and don't scrollbars come from the system, not the browser? anyway, i'm not faking them or anything. i'm just using ::-webkit-scrollbar and friends. there is official scrollbar styling stuff on the way, per the css specs. i didn't use any of that stuff/ i think i'll wait for at least one browser to support it. we have plenty of bug fixing and polishing to do still on this design. if you've emailed or tweeted or communicated with us in some way about it, i've probably seen it and have been log it all to make sure it's all addressed the best we can. plus stay tuned for some fun new features! if you have thoughts, free to leave comments here if you like, use our contact form, email at [email protected], or chat it up in our new spectrum community. our learning partner wanna be a better designer? css-tricks own sarah drasner is a heck of a designer, and has a wonderful course design for developers over on frontend masters where you'll learn to be a self-sufficient designer. wanna be a better designer? css-tricks own sarah drasner is a heck of a designer, and has a wonderful course design for developers over on frontend masters where you'll learn to be a self-sufficient designer. comments bram zijp permalink to comment# january 14, 2019 nice work man. love the design also. i worked allot with react and graphql and like to share some knowledge. i currently work on a project with no cms but with postgres, graphql, prisma, razzle, jest, react, react router, redux, apollo, styled components and react spring as key stack items. this stack feels really really awesome! if you have free time and are willing to learn, i can highly recommend taking a dip into react and one or more of the aforementioned stack items. specially for websites like these. splitting everything into reusable components really pays off in the long run. it‚Äôs also a lot of fun once you get the hang of things. to get you started; with this stack, a typical component folder structure looks like this: lobby
 index.js // exports default from lobbycontainer i use this so i can switch from non-container to container easily
 lobby.js // containing styled components and view elements
 lobbycontainer.js  // container queries, mutation, subscription and redux logic
 you also want to use razzle to easily get a server-side rendered app. you can also create your own with an ejected create react app and use some of the code from razzle (like the server index.js for stable hmr), given you have experience in webpack (it might be overwhelming to start here otherwise). another thing i like to use is a tool like styleguidist. but before i implement this in my current project, i will try out https://bitsrc.io . also looks pretty awesome considering i wanna reuse components across projects. i think bitsrc can save time setting up an npm module deploy pipeline. for a cms i plan to take a dip into https://strapi.io/ . it‚Äôs free and open-source, runs on node.js. it also allows you to use graphql as api. have you taken a look at strapi? let me know what you think about it :) i haven‚Äôt tried to use wordpress with graphql yet but if it‚Äôs worth it, let me know. or if anyone knows a better option for a graphql cms, which is open-source and free to use, please do let me know. richard lake permalink to comment# january 14, 2019 i believe the first time i stumbled across this site, css-tricks was probably at version 9/9.2. looking back i am still quite fond of it even now. as for the re-design, great work, lots of stand out design that sets it apart from the competition. i still love how you‚Äôve retained the jovial tagline after all these years‚Ä¶ *may or may not contain any actual ‚Äúcss‚Äù or ‚Äútricks‚Äù. will anderson permalink to comment# january 14, 2019 i would not be where i am without css-tricks. new site is awesome. thanks!!! goose permalink to comment# january 14, 2019 not sure if this is the right place to provide feedback, but when you control+f or command+f and search on css-tricks, it‚Äôll scroll very slowly instead of snapping to the result, which makes finding information and keywords on css-tricks much slower. as someone who uses this shortcut frequently, this is a usability issue for me. chris coyier permalink to comment# january 14, 2019 so that‚Äôs implemented essentially with scroll-behavior: html {
  scroll-behavior: smooth;
}
 but you‚Äôre the third person i‚Äôve heard from that specifically doesn‚Äôt like it because of how it affects finding things on the page (jumping to multiple results). i can see that, and actually, i‚Äôm not sure how much value there is to smooth scrolling at all on this particular site, so i think i‚Äôll yank it out. it makes me think though that it would be nice for browsers to let us know somehow if the page is in a state of being searched so that we could make design decisions based on that. brandon smith permalink to comment# january 14, 2019 @chris i totally agree. at my day job we ran into a case where our users complained that the browser‚Äôs ctrl+f box covered up a key part of the ui (we have a very dense ui), and i really wanted to be able to nudge the content down a bit when that was open. i tried hacking around it by tracking all the keyboard shortcuts that could open or close the search field, but that ended up being too problematic. hector perea permalink to comment# january 14, 2019 wow! the site redesign is absolutely amazing. i love the colors and the dark mode. definitely, it will be an inspiration for other sites. and thanks for let us see the details behind it. it‚Äôs awesome. brandon smith permalink to comment# january 14, 2019 thoughts: ‚Äì obviously it looks gorgeous. i love the new color scheme and the gradients. ‚Äì i think the scroll bar is great. it really cements the idea that this is a website for web developers, because it‚Äôs one of those things where initial reactions still tend to be ‚Äúyou can do that with css??‚Äù ‚Äì i have to say, the minimalism makes it a little hard to visually parse things. particularly on the home page; it‚Äôs not easy to break up the separate posts, especially when some of them have the line that squiggles through the middle of them. having a stronger separator in the middle of some list items than the ones between list items is a bit headache-inducing. and then the section at the very bottom just feels like sensory overload. i think some borders around posts (perhaps the same kind you have around comment-replies) would go a long way. the comment sections are a bit better, although the color gap on ‚Äúroot‚Äù comments is small enough there that some people might still not be able to see it. clint fern permalink to comment# january 14, 2019 real nice design. just a small bug i am getting ‚Äì sometimes (not always) when i scroll down and then back up i get a white band just below the menu. have put a screenshot here ‚Äì https://imgur.com/a/fpdwrd8 chris coyier permalink to comment# january 15, 2019 i‚Äôve seen that once in a while as well. seems rare to me, but happens. i‚Äôm 99% sure it‚Äôs intersectionobserver not firing like it should (but i have no idea why). sergio permalink to comment# january 14, 2019 awesome work! i really like how v17 breaks the monotony of material design all over the web. i notice some notion.so screenshots near the top. love that service. tim m permalink to comment# january 15, 2019 it‚Äôs interesting to see how far firefox is being left behind, both in market share and in design catering towards it ‚Äì i didn‚Äôt know there was meant to be a custom scroll bar until reading this post; and the comment on scrollbar width really shows how chrome is taken to be the norm ‚Äì at least on my system firefox uses the system scrollbar. and not supporting these features will only chase more people away from ff, which is a pity. other than that, it‚Äôs interesting to see the huge amounts of whitespace (blackspace?) in use. tim smith permalink to comment# january 15, 2019 i love the new redesign chris! props to you and kylie! the only thing that gives me pause when viewing your site on my iphone se, is on your home page. just about the ‚Äúcss-tricks‚Äù logo you have a gradient bar that is about 50% of the top edge of the view port. that bar gives me anxiety or sorts because it looks like a progress bar that never ends. thanks sam woolerton permalink to comment# january 16, 2019 new design looks epic! re tech stack, couple of thoughts: ‚Äì have you come across kinsta? stumbled across them a few days ago and looks like unbelievable speed at a really reasonable price ‚Äì seems easier than the custom box & probably better performance ‚Äì we‚Äôre on the same page re webpack; trying to learn webpack for react a year ago nearly made me quit web dev. there‚Äôs a fantastic wrapper though, built by the team from laravel ‚Äì laravel mix handles scss (and a ton of other things) out of the box and is a great way to move to a modern workflow. it‚Äôll probably take way less lines of code than the gulp build file too! learned a bunch of new tricks (both design & css) reading through the above, keep up the good work! gerhard gro√ümann permalink to comment# january 17, 2019 nice redesign! this pink-orange gradients look very cool and modern. is it possible to give visited links a different colour? it would help to see if i read the linked page before coming from another site. i‚Äôm not a great fan of white text on black (the bright lines start to produce blurred after-images on the retina). but as long as the article itself is black on white it‚Äôs not that crucial. i like the coloured background of inline code and the styling of numbered lists very much! the line highlighting in code blocks does not sit exactly on the line (more half of the line below), see https://css-tricks.com/making-movies-with-amcharts/ as an example. maybe it depends on the font. on my computer [firefox 64, ubuntu 16.04] the code blocks are shown in source code pro instead of operator mono (problems with font embedding?) isn‚Äôt it a dark pattern on this comment form to pre-check the checkbox of ‚Äúget the css-tricks newsletter‚Äù? ilchovuchkov.com permalink to comment# january 17, 2019 great design! innovative and revolutionary. congratulations!!! @bram zijp don‚Äôt worry so much for technology use on csstricks website. there are so much graphql and other alternative options, without api useful decisions as well, free, open source, and not so much. each project has own plan and possible solutions dependents on target audience and main target areas. everything is good! dennis permalink to comment# january 23, 2019 the redesign has a lot of nice features/effects and interesting ideas ‚Äì very impressive! as an irregular visitor (approx. 1-2 times per week, desktop user) i usually quickly scan the home page for new contents. now ‚Äì even after several visits ‚Äì scanning the page is still surprisingly difficult with the new design compared to the previous layouts. personally, i‚Äôd prefer if the left column would be moved to the right side to allow faster scanning. (currently i‚Äôm minimizing the browser window until the left column disappears ‚Äì this makes scanning the page a lot easier!) ‚Äúpopular this month‚Äù is very cool but it‚Äôs difficult to scroll horizontally on a desktop. it would be very helpful if the cards could be clicked and dragged horizontally as well because the scrollbar below the cards is really thin (and has a low contrast). or maybe even switch to grid view on narrow screens? ;-) i mostly agree with brandon‚Äôs comments when viewed on a desktop. for example the ‚Äúmonthly mixup‚Äù looks still uncommon to me on wide screens. the first time i thought the layout is broken until i eventually realized that everything is fine and it was meant to be like that. i prefer the much clearer layout shown on smaller screens where scanning the contents is easier/more efficient.) vincenzo coppolecchia permalink to comment# january 25, 2019 each time you redesign this site i think something like ‚Äúhow does he surprises me every time with another excellent theme!‚Äù ‚Äî great job! little note for the pen you included about the fixed top header on scroll: it jumps a little on scroll because of padding top being 45px in body.header-not-at-top { ‚Ä¶ }; it works with a value of 60px! will stocks permalink to comment# february 12, 2019 one thing i‚Äôd be super interested to know @chriscoyier ‚Äì how do you handle the highlighting and formatting of in-content code blocks (non-codepen)? i can see they‚Äôre <pre></pre> blocks, so i‚Äôm assuming that there‚Äôs some form of wordpress plugin in use to make sure the formatting is for the correct language and that they‚Äôre not input via a ‚Äúhtml block‚Äù (assuming gutenberg)? i use a plugin currently, but css-tricks‚Äô styling, formatting, layout and just overall look and feel of code blocks is sooooooo clean and nice to look at!!! i was super hopeful and checked https://css-tricks.com/snippets/wordpress/ but didn‚Äôt get lucky! chris coyier permalink to comment# february 12, 2019 i‚Äôm not gutenburg yet, partially because of code blocks! i‚Äôm not sure how successfully they would be transformed to blocks with the custom markup we use. lots more research to do there. we author pre blocks and syntax highlight them with https://prismjs.com/ this comment thread is closed. if you have important information to share, please contact us. related how do you stay up to date in this fast‚Å†-‚Å†moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents üìÖ upcoming front-end conferences css-tricks presents the power of serverless for front-end developers