skip to content why github? features → code review project management integrations actions packages security team management hosting customer stories → security → enterprise explore explore github → learn & contribute topics collections trending learning lab open source guides connect with others events community forum github education marketplace pricing plans → compare plans contact sales nonprofit → education → in this repository all github ↵ jump to ↵ no suggested jump to results in this repository all github ↵ jump to ↵ in this repository all github ↵ jump to ↵ sign in sign up whichbrowser / parser-php watch 86 star 1.5k fork 193 code issues 10 pull requests 6 actions projects 0 security insights dismiss join github today github is home to over 40 million developers working together to host and review code, manage projects, and build software together. sign up browser sniffing gone too far — a useragent parser library for php http://whichbrowser.net php whichbrowser user-agent library 1,224 commits 3 branches 0 packages 50 releases fetching contributors mit php php 100.0% branch: master new pull request find file clone or download clone with https use git or checkout with svn using the web url. open in desktop download zip downloading want to be notified of new releases in whichbrowser/parser-php? sign in sign up launching github desktop if nothing happens, download github desktop and try again. go back launching github desktop if nothing happens, download github desktop and try again. go back launching xcode if nothing happens, download xcode and try again. go back launching visual studio if nothing happens, download the github extension for visual studio and try again. go back latest commit nielsleenheer add galaxy z flip and galaxy s20 series phones latest commit 4899110 feb 12, 2020 files permalink type name latest commit message commit time failed to load latest commit information. bin instead of turning on every test, we turned it off. fixing... may 3, 2017 data add galaxy z flip and galaxy s20 series phones feb 12, 2020 src merge branch 'master' into patch-1 dec 8, 2019 tests merge branch 'master' into patch-1 dec 12, 2019 .coveralls.yml change coveralls config dec 2, 2017 .gitattributes create .gitattributes dec 2, 2019 .gitignore add package-lock.json to the ignore files nov 29, 2017 .travis.yml start testing php 7.4 on travis dec 5, 2019 contributing.md update badges and readme jul 12, 2017 license update badges and readme jul 12, 2017 readme.md update travis link dec 10, 2019 bootstrap.php built whichbrowser from commit 3b014b7 on whichbrowser/whichbrowser o… nov 30, 2015 composer.json add spaces and turn | into || dec 5, 2019 phpunit.xml add cache.php to phpunit.xml to make sure we get coverage for it feb 21, 2016 readme.md this is an extremely complicated and almost completely useless browser sniffing library. useless because you shouldn't use browser sniffing. so stop right now and go read something about feature detecting instead. i'm serious. go away. you'll thank me later. whichbrowser/parser-php the php version of whichbrowser for use on a server. fully compatible with php 5.4 or higher, including php 7. also available: whichbrowser/parser-javascript a javascript version of whichbrowser for use with node.js on the server whichbrowser/server a server written in php that provides a javascript api for use in the browser about whichbrowser but why almost completely useless and not completely useless? well, there is always an exception to the rule. there are valid reasons to do browser sniffing: to improve the user experience or to gather intelligence about which browsers are used on your website. my website is html5test.com and i wanted to know which score belongs to which browser. and to do that you need a browser sniffing library. why is it extremely complicated? because everybody lies. seriously, there is not a single browser that is completely truthful. almost all browsers say they are netscape 5 and almost all webkit browsers say they are based on gecko. even internet explorer 11 now no longer claims to be ie at all, but instead an unnamed browser that is like gecko. and it gets worse. that is why it is complicated. what kind of information does it give? you get a nice object which has information about the browser, rendering engine, os and device. it gives you names and versions and even device manufacturer and model. and whichbrowser is pretty tenacious. it gives you info that others don't. for example: juc (linux; u; 2.3.6; zh-cn; gt-i8150; 480*800) ucweb8.7.4.225/145/800  
uc browser 8.7 on a samsung galaxy w running android 2.3.6
 android is never mentioned mozilla/5.0 (series40; nokia501/10.0.2; profile/midp-2.1 configuration/cldc-1.1) gecko/20100401 s40ovibrowser/3.0.0.0.73  
nokia xpress 3.0.0 on a nokia asha 501 running nokia asha platform
 despite the useragent header claiming to be a series40 device, we know it's actually running the asha platform and we also know that ovibrowser has been renamed to nokia xpress. opera/9.80 (x11; linux zvav; u; zh) presto/2.8.119 version/11.10  
opera mini on a nokia 5230 running series60 5.0
 the useragent header looks like opera 11.10 on linux, but we know it's opera mini. we can even figure out the real operating system and device model from other headers. requirements whichbrowser requires with php 5.4 or higher and supports php 7. whichbrowser is compatible with the psr-4 autoloading standard and follows psr-1 and psr-2 coding style. how to install it you can install whichbrowser by using composer - the standard package manager for php. the package is called whichbrowser/parser. composer require whichbrowser/parser
 you can easily update whichbrowser by running a simple command. composer update whichbrowser/parser
 you should run this command as often as possible. you might even want to consider setting up a cron job for this purpose. how to use it the first step require the composer autoloader: <?php

    require 'vendor/autoload.php'; the second step is to create a new whichbrowser\parser object. this object will contain all the information the library could find about the browser. the object has a required parameter, either the headers send by the browser, or a useragent string. using the headers is preferable, because it will allow a better detection, but if you have just the useragent string, this will also work. for example: $result = new whichbrowser\parser(getallheaders()); or: $result = new whichbrowser\parser($_server['http_user_agent']); the variable $result now contains an object which you can query for information. there are various ways to access the information. first of all, you can call to tostring() function to get a human readable identification: "you are using " . $result->tostring();
// you are using chrome 27 on os x mountain lion 10.8 another possiblity is to query the object: $result->istype('desktop');
// true

$result->istype('mobile', 'tablet', 'media', 'gaming:portable');
// false

$result->isbrowser('maxthon', '<', '4.0.5');
// false

$result->isos('ios', '>=', '8');
// false

$result->isos('os x');
// true

$result->isengine('blink');
// true you can also access these properties directly: $result->browser->tostring();
// chrome 27  

$result->engine->tostring();
// blink

$result->os->tostring();
// os x mountain lion 10.8 or access parts of these properties directly: $result->browser->name;
// chrome

$result->browser->name . ' ' . $result->browser->version.tostring();
// chrome 27

$result->browser->version->value;
// 27.0.1453.110

$result->engine->name;
// blink finally you can also query versions directly: $result->browser->version->is('>', 26);
// true

$result->os->version->is('<', '10.7.4');
// false options it is possible to set additional options by passing an array as the second parameter when creating the parser object. disabling detection of bots in some cases you may want to disable the detection of bots. this allows the bot the deliberately fool whichbrowser, so you can pick up the identity of useragent what the bot tries to mimic. this is especially handy when you want to use whichbrowser to switch between different variants of your website and want to make sure crawlers see the right variant of the website. for example, a bot that mimics a mobile device will see the mobile variant of you site. $result = new whichbrowser\parser(getallheaders(), [ 'detectbots' => false ]); enable result caching whichbrowser supports psr-6 compatible cache adapters for caching results between requests. using a cache is especially useful if you use whichbrowser on every page of your website and a user visits multiple pages. during the first visit the headers will be parsed and the result will be cached. upon further visits, the cached results will be used, which is much faster than having to parse the headers again and again. there are adapters available for other types of caches, such as apc, doctrine, memcached, mongodb, redis and many more. the configuration of these adapters all differ from each other, but once configured, all you have to do is pass it as an option when creating the parser object, or use the setcache() function to set it afterwards. whichbrowser has been tested to work with the adapters provided by php cache. for a list of other packages that provide adapters see packagist. for example, if you want to enable a memcached based cache you need to install an extra composer package: composer require cache/memcached-adapter
 and change the call to whichbrowser/parser as follows: $client = new \memcached();
$client->addserver('localhost', 11211);

$pool = new \cache\adapter\memcached\memcachedcachepool($client);

$result = new whichbrowser\parser(getallheaders(), [ 'cache' => $pool ]); or $client = new \memcached();
$client->addserver('localhost', 11211);

$pool = new \cache\adapter\memcached\memcachedcachepool($client);

$result = new whichbrowser\parser();
$result->setcache($pool);
$result->analyse(getallheaders()); you can also specify after how many seconds a cached result should be discarded. the default value is 900 seconds or 15 minutes. if you think whichbrowser uses too much memory for caching, you should lower this value. you can do this by setting the cacheexpires option or passing it as a second parameter to the setcache() function. api reference the parser object after a new whichbrowser\parser object is created, it contains a number of properties and functions. all of these properties are guaranteed to be present. properties: browser an object that contains information about the browser itself engine an object that contains information about the rendering engine os an object that contains information about the operating system device an object that contains information about the device functions: gettype() returns the type and subtype property of the device object. if a subtype is present it is concatenated to the type and seperated by a semicolor, for example: mobile:smart or gaming:portable. if the subtype is not applicable, it just return the type, for example: desktop or ereader. istype($type [,$type [,$type [,$type]]]) if a single argument is used, the function returns true if the argument matches the type propery of device object. the argument can optionally also provide a subtype by concatenating it to the type and seperating it with a semicolon. it can use multiple arguments in which case the function returns true if one of the arguments matches. if none of the arguments matches, it returns false ismobile() return true if the browser is a mobile device, like a phone, tablet, ereader, camera, portable media player, watch or portable gaming console. otherwise it returns false. isbrowser($name [, $comparison, $version]) is used to query the name and version property of the browser object. the funcion can contain a single argument to a simple comparison based on name, or three arguments to compare both name and version. the first argument always contains the name of the browser. the second arguments is a string that can container either <, <=, =, => or >. the third is an integer, float or string that contains the version. you can use versions like 10, 10.7 or '10.7.4'. for more information about how version comparisons are performed, please see the is() function of the version object. isengine($name [, $comparison, $version]) is used to query the name and version property of the engine object. this function works in exactly the same way as isbrowser. isos($name [, $comparison, $version]) is used to query the name and version property of the os object. this function works in exactly the same way as isbrowser. isdetected() is there actually some browser detected, for did we fail to detect anything? tostring() get a human readable representation of the detected browser, including operating system and device information. the browser object an object of the whichbrowser\model\browser class is used for the browser property of the main whichbrowser\parser object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: name a string containing the name of the browser alias a string containing an alternative name of the browser version a version object containing information about the version of the browser stock a boolean, true if the browser is the default browser of the operating system, false otherwise channel a string containing the distribution channel, ie. 'nightly' or 'next'. mode a string that can contain the operating mode of the browser, ie. 'proxy'. hidden a boolean that is true if the browser does not have a name and is the default of the operating system. family an object that contains information about to which family this browser belongs using an object that contains information about to which kind of webview this browser uses functions: isfamily($name) does the family of this browser have this name, or does the browser itself have this name. isusing($name) is the browser using a webview using with the provided name. getname() get the name of the browser getversion() get the version of the browser tostring() get a human readable representation of the detected browser the engine object an object of the whichbrowser\model\engine class is used for the engine property of the main whichbrowser\parser object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: name a string containing the name of the rendering engine version a version object containing information about the version of the rendering engine functions: getname() get the name of the rendering engine getversion() get the version of the rendering engine tostring() get a human readable representation of the detected rendering engine the os object an object of the whichbrowser\model\os class is used for the os property of the main whichbrowser\parser object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: name a string containing the name of the operating system version a version object containing information about the version of the operating system family an object that contains information about to which family this operating system belongs functions: isfamily($name) does the family of this operating system have this name, or does the operating system itself have this name. getname() get the name of the operating system getversion() get the version of the operating system tostring() get a human readable representation of the detected operating system the device object an object of the whichbrowser\model\device class is used for the device property of the main whichbrowser\parser object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: type a string containing the type of the browser. subtype a string containing the subtype of the browser. identified a boolean that is true if the device has been positively identified. manufacturer a string containing the manufacturer of the device, ie. 'apple' or 'samsung'. model as string containing the model of the device, ie. 'iphone' or 'galaxy s4'. the type property can contain any value from the following list: desktop mobile pda dect tablet gaming ereader media headset watch emulator television monitor camera printer signage whiteboard devboard inflight appliance gps car pos bot projector if the type is "mobile", the subtype property can contain any value from the following list: feature smart if the type is "gaming", the subtype property can contain any value from the following list: console portable functions: getmanufacturer() get the name of the manufacturer getmodel() get the name of the model tostring() get a human readable representation of the detected device the family object an object of the whichbrowser\model\family class is used for the family property of the whichbrowser\model\browser and whichbrowser\model\os object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: name a string containing the name of the family version a version object containing information about the version of the family functions: getname() get the name of the family getversion() get the version of the family tostring() get a human readable representation of the family the using object an object of the whichbrowser\model\using class is used for the using property of the whichbrowser\model\browser object and contains a number of properties. if a property is not applicable in this situation it will be null or undefined. properties: name a string containing the name of the webview version a version object containing information about the version of the webview functions: getname() get the name of the webview getversion() get the version of the webview tostring() get a human readable representation of the webview the version object an object of the whichbrowser\model\version class is used for the version property of the browser, engine and os object and contains a number of properties and functions. if a property is not applicable in this situation it will be null or undefined. properties: value a string containing the original version number. alias a string containing an alias for the version number, ie. 'xp' for windows '5.1'. nickname a string containing a nickname for the version number, ie. 'mojave' for os x '10.14'. details an integer containing the number of digits of the version number that should be printed. functions: is($version) or is($comparison, $version) using this function it is easy to compare a version to another version. if you specify only one argument, this function will return if the versions are the same. you can also specify two arguments, in that case the first argument contains the comparison operator, such as <, <=, =, => or >. the second argument is the version you want to compare it to. you can use versions like 10, 10.7 or '10.7.4', but be aware that 10 is not the same as 10.0. for example if our os version is 10.7.4: $result->os->version->is('10.7.4');
// true

$result->os->version->is('10.7');
// true

$result->os->version->is('10');
// true

$result->os->version->is('10.0');
// false

$result->os->version->is('>', '10');
// false

$result->os->version->is('>', '10.7');
// false

$result->os->version->is('>', '10.7.3');
// true © 2020 github, inc. terms privacy security status help contact github pricing api training blog about you can’t perform that action at this time. you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session.