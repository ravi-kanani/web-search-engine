blog sign in free trial share reply 0 nada rifki follow nada is a javascript developer who likes to play with ui components to create interfaces with great ux. she specialises in vue.js and loves sharing anything and everything that could help her fellow front-end web developers. nada also dabbles in digital marketing, dance and chinese. how to use css scroll snap march 9, 2020 2 min read 837 the idea of only needing css to customize your scroll instead of playing with javascript sounds great, doesn’t it? today, i’m going to show you how css scroll snap helps you do just that. so what does css scroll snap do? i bet you’ve used some libraries to control the scrolling behavior of your website. i have, and i had a terrible time with some of them. some of these libraries can drag your page’s performance and user experience way down. not to mention that it’s a real pain to deal with all the bugs they sometimes generate as you add more complexity with your new design updates. that’s why i prefer to use this simple css feature that allows me to get a beautiful scroll through my page without having to rely on javascript libraries. these properties also help me save a ton of time. in simple terms, css scroll snap makes the scroll snap, locking the viewport at a specific point (that you indicate) with each scroll. a linear scroll, on the other hand, moves according to the rate of the controller — whether that be a mouse, touch gesture, or arrow keys. now, let’s see how css scroll snap works. we made a custom demo for . no really. click here to check it out. click here to see the full demo with network requests if you want to go straight to a real-life example, head over to the third section where i’ve built the instagram carousel with a few lines of css code. let’s get started. how css scroll snap works css scroll snap works by applying two primary properties: scroll-snap-type and scroll-snap-align. here is what you need to know about each: the first one, scroll-snap-type, is applied to the parent container. it accepts two arguments: the snap direction and the snap behavior: .container {
 scroll-snap-type: [ x | y | block | inline | both ] [ mandatory | proximity ];
} about the snap behavior arguments: choosing proximity makes the snap only appear at the nearest point to where the user stopped scrolling. on the other hand, mandatory makes the snap happen at the specific position you choose when the user is scrolling. the second one, scroll-snap-align, is applied to the container’s children. this is where you specify the snap point for the x-axis and the y-axis: .children {
 scroll-snap-align: [ none | start | end | center ]{1,2};
} before we continue, it’s important to note that none of this is going to work unless you specify the container’s overflow and give it a fixed height. additionally, you should never use mandatory if the content inside one of your child elements is longer than the parent container. if you do, the user won’t be able to see that content. there are two more properties we need to familiarize ourselves with: scroll-padding (applied to the parent container) is pretty much like the css padding property and acts as the offset. you also have scroll-padding-top, scroll-padding-bottom, scroll-padding-left and scroll-padding-right. scroll-margin (applied to the container’s children) is also like the css margin property and serves as the outset. you also have scroll-margin-top, scroll-margin-bottom, scroll-margin-left and scroll-margin-right. if you are interested in learning more about all scroll snap properties and future ones, the mozilla documentation is always a good place to start. how to use css scroll snap to create an instagram-like carousel to help you get a better grasp on this concept, i made a little instagram-like carousel on codepen. see the live demo here: css scroll snap – instagram-like carousel no description as you can see, it includes seven boxes with different sizes. what amazes me is that we don’t have anything else to do other than add the css lines below to automatically make the scroll snap to each box. <style>
.container {
    width: 60vw;
    height: 70vh;
    margin: 15vh auto;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    color: white;
    background-color: oldlace;
    display: flex;
    align-items: center;
}

.child {
    margin-left: 0.5rem;
    height: 90%;
    scroll-snap-align: start;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
}

.child:nth-child(1n) {
    background-color: darkorchid;
    flex: 0 0 80%;
}

.child:nth-child(2n) {
    background-color: indigo;
    flex: 0 0 60%;
}

.child:nth-child(3n) {
    background-color: navy;
    flex: 0 0 40%;
}

.child:nth-child(4n) {
    background-color: palegreen;
    flex: 0 0 50%;
}

.child:nth-child(5n) {
    background-color: yellow;
    flex: 0 0 80%;
}

.child:nth-child(6n) {
    background-color: orange;
    flex: 0 0 60%;
}

.child:nth-child(7n) {
    background-color: tomato;
    flex: 0 0 80%;
}
</style> solving this issue with only javascript would have required a lot of extra work. is css scroll snap supported cross-browser? okay, now let’s get to the million-dollar question: cross-browser support. as you can see here, the css scroll snap functionality is well supported across modern browsers. the only issue you’ll encounter is with internet explorer and firefox, which require an older version of the specs that you can find here. also, i would advise you to add the property -webkit-overflow-scrolling: touch; to your container to support ios devices. conclusion that’s pretty much it! it’s so simple, but there were times where this could have saved me hours of code. try to implement a scroll snap using javascript and recalculate the snap point with each child element with different widths, and you’ll see what i mean. if you have any questions or remarks, please feel free to let me know in the comments or to ping me on twitter @rifkinada. i always reply. is your frontend hogging your users' cpu? as web frontends get increasingly complex, resource-greedy features demand more and more from the browser. if you’re interested in monitoring and tracking client-side cpu usage, memory usage, and more for all of your users in production, try logrocket. https://logrocket.com/signup/ logrocket is like a dvr for web apps, recording everything that happens in your web app or site. instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors. modernize how you debug web apps — start monitoring for free. share this: twitter reddit linkedin facebook nada rifki follow nada is a javascript developer who likes to play with ui components to create interfaces with great ux. she specialises in vue.js and loves sharing anything and everything that could help her fellow front-end web developers. nada also dabbles in digital marketing, dance and chinese. featured posts #css « when css doesn’t do anything the complete guide to publishing a react package to npm » creative text flows using css shapes abbey fitzgerald mar 25, 2020 5 min read how to handle pii in websites and web apps danny guo mar 18, 2020 4 min read what’s new in typescript 3.8 esteban herrera mar 11, 2020 6 min read leave a reply cancel reply we just moved our blog! does something seem off? email support@logrocket.com