this website works better with javascript enabled, please enable javascript if you want to benefit from all the website’s features ( click to dismiss ) algolia logo menu algolia logo products products overview pricing pricing that scales with the value of your business search api powerful, hosted search api to create fast and relevant search analytics understand your users, uncover hidden opportunities rules optimize results ranking for your users' queries a/b testing uncover the best performing relevance strategies instantsearch a set of ui components to design the perfect experience personalization tailor the search and discovery to your users crawler automatically extract and enrich your website content visual editor get control over search and discovery to reflect your business goals what's new what’s new in algolia winter ‘20 want to see a full demo right now? watch here solutions solutions overview site search build frictionless experiences on any device voice search search without the box geo search leverage a location-based search and discovery mobile search accelerate engagement and conversion on mobile industries e-commerce media saas popular solutions magento shopify salesforce commerce cloud how 3 media companies manage to increase content consumption thanks to search get the ebook pricing enterprise enterprise overview azure customers infrastructure security & compliance developers developers getting started documentation integrations changelog support community faq resources resources login free trial free trial login looking for our logo? we got you covered! download logo pack more algolia assets make every search | request a demo increase order value power content discoveryfor 100 million viewers better relevanceand higher sales global help deskdeployed in days deliver what your customers want every time algolia’s search-as-a-service and full suite of apis allow teams to easily develop tailored, fast search and discovery experiences that delight and convert. trusted by8,000customers serving70 billionqueries / month watch the webinar winter ‘20 product launch webinar unlocking the business value of search and discovery watch the webinar experiences that matter to your business e-commerce personalized shopping experiences that convert your users want an intuitive shopping experience. algolia enables teams to create a personalized site search and discovery experience that customers will love. learn more media unique experiences to drive engagement users are looking to consume engaging content. algolia empowers teams to surface the freshest and most relevant content, and ultimately drive user satisfaction. learn more apps powerful apis to fit your use case every product deserves a bespoke search and discovery experience. algolia’s flexible apis and ui toolkits provides teams with the resources necessary to build the experience best suited for your needs. learn more algolia obsesses over developer experience our mission is to give development teams the building blocks to create a fast, relevant search experience. extensive documentation & guides, an active community, 24/7 support make it a pleasure to work with algolia. backend rubyrailspythondjangophpsymfonylaraveljavascriptjavascalagoc#kotlinswiftandroid frontendjavascriptreactandroidvueangularios backendfrontend ruby rails python django php symfony laravel javascript java scala go c# kotlin swift android my_index = algolia::index.new('contacts') my_index.add_object :firstname => "jimmie",                     :lastname => "barninger",                     :company => "california paint" class contact < activerecord::base   include algoliasearch   algoliasearch do     attribute :firstname, :lastname, :company   end end myindex = apiclient.init_index("contacts") myindex.add_object({   "firstname": "jimmie",   "lastname": "barninger",   "company": "california paint" }) from django.contrib.algoliasearch import algoliaindex class yourmodelindex(algoliaindex):   fields = ('firstname', 'lastname', 'company') $myindex = $apiclient->initindex("contacts"); $myindex->addobject([   "firstname" => "jimmie",   "lastname" => "barninger",   "company" => "california paint", ]); /**  * @orm\entity  */ class contact {   /**    * @var string    *    * @orm\column(name="firstname", type="string")    * @group({searchable})    */   protected $firstname;   /**    * @var string    *    * @orm\column(name="lastname", type="string")    * @group({searchable})    */   protected $lastname;   /**    * @var string    *    * @orm\column(name="company", type="string")    * @group({searchable})    */   protected $company; } use illuminate\database\eloquent\model; use laravel\scout\searchable; class contact extends model {   use searchable; } const myindex = apiclient   .initindex('contacts'); myindex.addobject({   firstname: 'jimmie',   lastname: 'barninger',   company: 'california paint', }) index<contact> index = client   .initindex("contacts", contact.class); index.addobject(   new contact()     .setfirstname("jimmie")     .setlastname("barninger")     .setcompany("california paint") ); import algolia.algoliadsl._ import scala.concurrent.executioncontext.implicits.global case class contact(   firstname: string,   lastname: string,   company: string ) val indexing: future[indexing] = client.execute {   index into "contacts" `object` contact(     "jimmie",     "barninger",     "california paint"   ) } object := map[string]string{   "firstname": "jimmie",   "lastname":  "barninger",   "company":   "california paint" } res, err := index.saveobject(object) searchindex index = client.initindex("contacts"); var contact = new contact {   firstname = "jimmie",   lastname = "barninger",   company = "california paint" }; index.saveobject(contact); val index = client.initindex(indexname("contacts")) val json = json {   "firstname" to "jimmie"   "lastname" to "barninger"   "company" to "california paint" } index.saveobject(json) let myindex = apiclient.getindex("contacts") let n = [   "firstname": "jimmie",   "lastname": "barninger",   "company": "california paint" ] myindex.addobject(n) index myindex = apiclient.initindex("contacts"); jsonobject jsonobject = new jsonobject()   .put("firstname", "jimmie")   .put("lastname", "barninger")   .put("company", "california paint"); myindex.addobjectasync(jsonobject, null); <div id="searchbox"></div> <div id="refinement"></div> <div id="hits"></div> <script>   const {     searchbox,     hits   } = instantsearch.widgets;   search.addwidgets([     searchbox({       container: "#searchbox"     }),     hits({       container: "#hits"     }),     refinementlist({       container: "#refinement",       attribute: "company"     }),   ]);   search.start(); </script> const app = () => (   <instantsearch>     <searchbox />     <hits />     <pagination />     <refinementlist       attribute="company"     />   </instantsearch> ); <relativelayout   xmlns:algolia="http://schemas.android.com/apk/res-auto"   xmlns:android="http://schemas.android.com/apk/res/android"   android:layout_width="match_parent"   android:layout_height="match_parent">   <com.algolia.instantsearch.ui.views.searchbox     android:id="@+id/search_box"     android:layout_width="match_parent"     android:layout_height="wrap_content"/>   <com.algolia.instantsearch.ui.views.stats     android:id="@+id/search_box"     android:layout_width="match_parent"     android:layout_height="wrap_content"/>   <com.algolia.instantsearch.ui.views.hits     android:layout_width="match_parent"     android:layout_height="wrap_content"     algolia:itemlayout="@layout/hits_item"/> </relativelayout> <ais-instant-search>   <ais-search-box />   <ais-refinement-list     attribute="company"   />   <ais-hits />   <ais-pagination /> </ais-instant-search> <ais-instantsearch>   <ais-search-box></ais-search-box>   <ais-refinement-list     [attribute]="company"   ></ais-refinement-list   <ais-hits></ais-hits> </ais-instantsearch> import instantsearch override func viewdidload() {   super.viewdidload()   let searchbar = searchbarwidget(frame: ...)   let statswidget = statslabelwidget(frame: ...)   self.view.addsubview(searchbar)   self.view.addsubview(statswidget)   instantsearch.shared.registerallwidgets(in: self.view)} javascript react android vue angular ios start building read docs secure, reliable & scalable secure soc 3 & gdpr approved algolia is committed to delivering a highly secure and compliant environment for our customers. security policies reliable sla 99.999% we stand behind our service with an industry leading 99.999% sla available on select plans with a 1000x rebate policy. api status scalable global scale 70+ data centers on 6 continents to ensure a consistent experience for every user. infrastructure start your search today see algolia in action request a demo products pricing search api analytics a/b testing rules infrastructure instantsearch personalization custom crawler visual editor api status what's new solutions enterprise customers azure e-commerce media saas site search voice search geo search mobile search partners developers getting started documentation integrations changelog support community faq company about us blog press careers security & compliance subscribe to the newsletter contact us social networks linkedin twitter facebook instagram youtube algolia logo2020 algolia - all rights reserved. privacy policy terms of service acceptable use policy service level agreement