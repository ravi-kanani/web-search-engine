skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation simple & boring march 2019 — chris coyier simplicity is a funny adjective in web design and development. i'm sure it's a quoted goal for just about every project ever done. nobody walks into a kickoff meeting like, "hey team, design something complicated for me. oh, and make sure the implementation is convoluted as well. over-engineer that sucker, would ya?" of course they want simple. everybody wants simple. we want simple designs because simple means our customers will understand it and like it. we want simplicity in development. nobody dreams of going to work to spend all day wrapping their head around a complex system to fix one bug. still, there is plenty to talk about when it comes to simplicity. it would be very hard to argue that web development has gotten simpler over the years. as such, the word has lately been on the tongues of many web designers and developers. let's take a meandering waltz through what other people have to say about simplicity. bridget stewart recalls a frustrating battle against over-engineering in "a simpler web: i concur." after being hired as an expert in ui implementation and given the task of getting a video to play on a click... i looked under the hood and got lost in all the looping functions and the variables and couldn't figure out what the code was supposed to do. i couldn't find any html <video> being referenced. i couldn't see where a link or a button might be generated. i was lost. i asked him to explain what the functions were doing so i could help figure out what could be the cause, because the browser can play video without much prodding. instead of successfully getting me to understand what he had built, he argued with me about whether or not it was even possible to do. i tried, at first calmly, to explain to him i had done it many times before in my previous job, so i was absolutely certain it could be done. as he continued to refuse my explanation, things got heated. when i was done yelling at him (not the most professional way to conduct myself, i know), i returned to my work area and fired up a branch of the repo to implement it. 20 minutes later, i had it working. it sounds like the main problem here is that the dude was a territorial dingus, but also his complicated approach literally stood in the way of getting work done. simplicity on the web often times means letting the browser do things for us. how many times have you seen a complex re-engineering of a select menu not be as usable or accessible as a <select>? jeremy wagner writes in make it boring: eminently usable designs and architectures result when simplicity is the default. it's why unadorned html works. it beautifully solves the problem of presenting documents to the screen that we don't even consider all the careful thought that went into the user agent stylesheets that provide its utterly boring presentation. we can take a lesson from this, especially during a time when more websites are consumed as web apps, and make them more resilient by adhering to semantics and native web technologies. my guess is the rise of static site generators — and sites that find a way to get as much server-rendered as possible — is a symptom of the industry yearning for that brand of resilience. do less, as they say. lyza danger gardner found a lot of value in this in her own job: ... we need to try to do as little as possible when we build the future web. this isn’t a rationalization for laziness or shirking responsibility—those characteristics are arguably not ones you’d find in successful web devs. nor it is a suggestion that we build bland, homogeneous sites and apps that sacrifice all nuance or spark to the greater good of total compatibility. instead it is an appeal for simplicity and elegance: putting commonality first, approaching differentiation carefully, and advocating for consistency in the creation and application of web standards. christopher t. miller writes in "a simpler web": should we find our way to something simpler, something more accessible? i think we can. by simplifying our sites we achieve greater reach, better performance, and more reliable conveying of the information which is at the core of any website. i think we are seeing this in the uptick of passionate conversations around user experience, but it cannot stop with the ux team. developers need to take ownership for the complexity they add to the web. it's good to remember that the complexity we layer onto building websites is opt-in. we often do it for good reason, but it's possible not to. garrett dimon: you can build a robust, reliable, and fully responsive web application today using only semantic html on the front-end. no images. no css. no javascript. it’s entirely possible. it will work in every modern browser. it will be straightforward to maintain. it may not fit the standard definition of beauty as far as web experiences go, but it will work. in many cases, it will be more usable and accessible than those built with modern front-end frameworks. that’s not to say that this is the best approach, but it’s a good reminder that the web works by default without all of our additional layers. when we add those additional layers, things break. or, if we neglect good markup and css to begin with, we start out with something that’s already broken and then spend time trying to make it work again. we assume that complex problems always require complex solutions. we try to solve complexity by inventing tools and technologies to address a problem; but in the process, we create another layer of complexity that, in turn, causes its own set of issues. — max böck, "on simplicity" perhaps the worst reason to choose a complex solution is that it's new, and the newness makes it feel like choosing it makes you on top of technology and doing your job well. old and boring may just what you need to do your job well. dan mckinley writes: “boring” should not be conflated with “bad.” there is technology out there that is both boring and bad. you should not use any of that. but there are many choices of technology that are boring and good, or at least good enough. mysql is boring. postgres is boring. php is boring. python is boring. memcached is boring. squid is boring. cron is boring. the nice thing about boringness (so constrained) is that the capabilities of these things are well understood. but more importantly, their failure modes are well understood. rachel andrew wrote that choosing established technology for the cms she builds was a no-brainer because it's what her customers had. you're going to hear less about old and boring technology. if you're consuming a healthy diet of tech news, you probably won't read many blog posts about old and boring technology. it's too bad really, i, for one, would enjoy that. but i get it, publications need to have fresh writing and writers are less excited about topics that have been well-trod over decades. as david desandro says, "new tech gets chatter". when there is little to say, you just don't say it. you don't hear about textmate because textmate is old. what would i tweet? still using textmate. still good. while we hear more about new tech, it's old tech that is more well known, including what it's bad at. if newer tech, perhaps more complicated tech, is needed because it solves a known pain point, that's great, but when it doesn't... you are perfectly okay to stick with what works for you. the more you use something, the clearer its pain points become. try new technologies when you're ready to address those pain points. don't feel obligated to change your workflow because of chatter. new tech gets chatter, but that doesn't make it any better. adam silver says that a boring developer is full of questions: "will debugging code be more difficult?", "might performance degrade?" and "will i be slowed down due to compile times?" dan kim is also proud of being boring: i have a confession to make — i’m not a rock star programmer. nor am i a hacker. i don’t know ninjutsu. nobody has ever called me a wizard. still, i take pride in the fact that i’m a good, solid programmer. complexity isn't an enemy. complexity is valuable. if what we work on had no complexity, it would worth far less, as there would be nothing slowing down the competition. our job is complexity. or rather, our job is managing the level of complexity so it's valuable while still manageable. santi metz has a great article digging into various aspects of this, part of which is about considering how much complicated code needs to change: we abhor complication, but if the code never changes, it's not costing us money. your cms might be extremely complicated under the hood, but if you never touch that, who cares. but if your cms limits what you're able to do, and you spend a lot of time fighting it, that complexity matters a lot. it's satisfying to read sandi's analysis that it's possible to predict where code breaks, and those points are defined by complexity. "outlier classes" (parts of a code base that cause the most problems) can be identified without even seeing the code base: i'm not familiar with the source code for these apps, but sight unseen i feel confident making a few predictions about the outlying classes. i suspect that they: are larger than most other classes, are laden with conditionals, and represent core concepts in the domain i feel seen. boring is in it for the long haul. cap watkins writes in "the boring designer": the boring designer is trusted and valued because people know they’re in it for the product and the user. the boring designer asks questions and leans on others’ experience and expertise, creating even more trust over time. they rarely assume they know the answer. the boring designer is capable of being one of the best leaders a team can have. so be great. be boring. be boring! need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. comments cheddar permalink to comment# march 25, 2019 it’s so hard to convince a designer to use a standard select box over a custom themed version. if we stick with the standard, we’re inheriting all the functionality, accessibility, and cross-platform capabilities out of the box. such low overhead, with no maintenance. but instead we spend hours upon hours trying to recreate a decent custom designed select box. facepalm. ed zahurak permalink to comment# march 27, 2019 21,000% agreement. callmegoon permalink to comment# march 29, 2019 yep – i agree as well. it’s almost as if we’re getting to the phase of preaching to the choir with this ‘be simple’ mantra. i think we know this (or at least a lot of devs are buying into this now)—the next step is figuring out how to get buy-in from additional stakeholders (designers and brand managers that want a unique brand experience, which i totally understand). when we can crack that, we’ll be making real progress. peter yee permalink to comment# march 25, 2019 while framework and tools could speed up development, it could also slows down the process. i had experienced setback where framework not properly set, conflict with updates and relying too much on specific dev process. i like to put this in an example of car. while the exterior and interior look are important for sales, the performance, reliability and maintenance are the key to increase customer loyalty. covarr permalink to comment# march 25, 2019 i see a lot of vitriol directed at some of the popular javascript frameworks (node, react, vue, etc), and i must admit, i have been guilty of that myself. but honestly, they’re not the problem, at least, not in and of themselves. rather, it’s how indiscriminately they get used. they have their appropriate use cases, and static landing pages are typically not among them, bridget stewart permalink to comment# april 4, 2019 i agree with you. “indiscriminately” is a great way to put it. ram permalink to comment# march 26, 2019 this article gives me a lot of think about when building new apps with trending technologies or the good old boring tech. well written hands down!!! vanderson permalink to comment# march 26, 2019 i appreciate this post. the last couple years of tech blogs/articles/discussions have been overwhelmingly front end systems that require a huge tech stack just for a “hello world”. i have intentionally stayed away from the bleeding edge for years, and have saved myself from investing in useless trends. but every so often, a “seemingly” complex trend is actually useful for simplifying other things. but if we are always bent on the latest and greatest, our ability to discern between “a complex system to keep up with a trend” vs “a complex system to make other things simple” becomes greatly diminished. guy hickling permalink to comment# march 26, 2019 complex systems, frameworks, javascript solutions, they all break accessibility, unless you go to extra lengths, sometimes extraordinary lengths, to add in the accessibility as well. html has basic accessibility built in, and assistive technology like screen readers for the blind all follow the html spec. in countries where equality and accessibility laws have teeth, all those complex solutions may look very pretty, but they can land your business with an expensive lawsuit or a visit from whatever legal compliance inspectors your country has. keep it simple; it can still look pretty, and everyone can use it as well. graeme permalink to comment# march 26, 2019 yes! i often see two major issues – designers are inconsistent. typography changes from screen to screen, things which are almost the same and could be made modular, are just different enough to require conditional styling. this adds complexity for everyone, including the designer who is unable to reuse her own work in future. “ux” designers often do not know who they are designing for. they don’t spend time with the people they are supposedly solving for. so they waste time in detail that is low value. spend regular time with your users, and you’ll design the right thing in the right order. and you’ll be way less worried about embellishment. derrick douglass permalink to comment# march 28, 2019 i am graphic/web designer and front end developer. in my experience, most people, including managers and even customers view my effective and simple design solutions with suspicion. because there is no perceived complexity in the solution they feel they aren’t getting their money’s worth. often i here people say, “i could have designed that.” until our reward system is based on creating simple and effective work, complexity will remain king. rodrigo permalink to comment# march 28, 2019 i’m not sure about to be able to build a fully responsive web application using only semantic html on the front-end, without css and without javascript. diego permalink to comment# march 28, 2019 same here, that sentence raised and bent one of my eyebrows. oleg yuzvik permalink to comment# march 28, 2019 from my experience, existing complexity of web applications and software in general is often caused by developers missing the point of their job, which is – making software do what it is supposed to. a lot of developers are focusing too much on technologies and forget that their primary concern should be working, maintainable and robust software that serves well for solving problems it was designed to solve. we allow ourselves to enjoy technologies more than we should and forget that they are just tools. matthew emery permalink to comment# march 29, 2019 you’ll thank yourself for being boring when you have to update your own code that’s several years old. wray permalink to comment# april 3, 2019 i’ve been trying to stay boring in an ocean of cms nonsense for a looong long time. it’s nice to see i’m not the only one that feels it’s important. go check out my site rgbk.org and view source and you’ll see what i mean :) chris coyier permalink to comment# february 16, 2020 michael scharnagl: never feel ashamed to start with a traditional (boring) stack – you may be the one launching a great project, while others still set up there build scripts. be boring by default and enhance on the way this comment thread is closed. if you have important information to share, please contact us. related how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers