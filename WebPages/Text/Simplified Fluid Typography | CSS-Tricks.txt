skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / simplified fluid typography author chris coyier 12 comments join conversation last updated dec 23, 2019 fluid type personalized marketing with mailchimp fluid typography is the idea that font-size (and perhaps other attributes of type, like line-height) change depending on the screen size (or perhaps container queries if we had them). the core trickery comes from viewport units. you can literally set type in viewport units (e.g. font-size: 4vw), but the fluctuations in size are so extreme that it's usually undesirable. that's tempered by doing something like font-size: calc(16px + 1vw). but while we're getting fancy with calculations anyway, the most common implementation ended up being an equation to calculate plain english: i want the type to go between being 16px on a 320px screen to 22px on a 1000px screen. which ended up like this: html {
  font-size: 16px;
}
@media screen and (min-width: 320px) {
  html {
    font-size: calc(16px + 6 * ((100vw - 320px) / 680));
  }
}
@media screen and (min-width: 1000px) {
  html {
    font-size: 22px;
  }
} that's essentially setting a minimum and maximum font size so the type won't shrink or grow to anything too extreme. "css locks" was a term coined by tim brown. minimum and maximum you say?! well it so happens that functions for these have made their way into the css spec in the form of min() and max(). so we can simplify our fancy setup above with a one-liner and maintain the locks: html {
  font-size: min(max(16px, 4vw), 22px);
} we actually might want to stop there because even though both safari (11.1+) and chrome (79+) support this at the current moment, that's as wide as support will get today. speaking of which, you'd probably want to slip a font-size declaration before this to set an acceptable fallback value with no fancy functions. but as long as we're pushing the limits, there is another function to simplify things even more: clamp()! clamp takes three values, a min, max, and a flexible unit (or calculation or whatever) in the middle that it will use in case the value is between the min and max. so, our one-liner gets even smaller: body {
  font-size: clamp(16px, 4vw, 22px);
} that'll be chrome 79+ (which doesn't hasn't shipped to stable but will very soon). uncle dave is very happy that fittext is now a few bytes instead of all-of-jquery plus 40 more lines. here is dave chucking css custom properties at it: see the pen fittext in css with clamp() by dave rupert (@davatron5000) on codepen. our learning partner wanna learn modern css layout? laying out designs on the web with css has gotten a lot more powerful in recent years. css grid and flexbox are incredibly powerful tools for that, and frontend masters has a complete learning course on them from jen kramer. wanna learn modern css layout? laying out designs on the web with css has gotten a lot more powerful in recent years. css grid and flexbox are incredibly powerful tools for that, and frontend masters has a complete learning course on them from jen kramer. comments jens t√∂rnell permalink to comment# november 29, 2019 brilliant! please someone make a poly fill for the clamp trick in es6. reply matt permalink to comment# november 30, 2019 but 4vw gets you to 22px at a screen width of only 550px, so you‚Äôre better off with the calculation. reply manuel permalink to comment# december 3, 2019 @matt, ain‚Äôt that the point, or isn‚Äôt this intended? font size is 4vw up to 550px screen width. everything up is limited to 22px. ted permalink to comment# december 6, 2019 agreed, i prefer being able to define when the scaling should end using viewport width, which the long calc() formula lets you do. i created a custom sass mixin to make it easier to generate those formulas https://threespot.github.io/frontline-sass/documentation/#main-function-fs-scale hope others find it useful! eric permalink to comment# january 7, 2020 just adjust it 2.2vw brent r knudsen permalink to comment# november 30, 2019 this is a great tip/trick. it can really save some headache on making my website mobile-friendly. thank you! reply henry methu muhindi permalink to comment# december 1, 2019 good stuff there reply ioiiooio permalink to comment# december 2, 2019 i wonder what this means for using rem units in a project? if you‚Äôre using fluid type then i would think all your other elements should be sized using px. otherwise, if the user changes the base font size then all the elements will scale up except the text. reply nyx permalink to comment# december 2, 2019 does this still work properly if the user browser‚Äôs default font size is outside that min-max range? i have mine set at 24 px because my eyes are terrible. reply diego permalink to comment# december 3, 2019 i wonder what you think about the use of ch units. they are fairly well supported plus, although they are not perfect, they are quite good to cope with situations in which we want to keep the number of characters per line within a reasonable range in paragraphs. also we could fine tune them using formulas (calc()) reply marc permalink to comment# december 4, 2019 that‚Äôs pretty neat. i‚Äôve been doing something similar using a scss mixin and it has worked out very good so far. see the pen fluid typography by marc m√ºller (@mkmueller) on codepen. reply daniel lewandowski permalink to comment# december 5, 2019 rfs is a great example as well. it supports responsive sizing of other css properties now too and is part of bootstrap: https://github.com/twbs/rfs reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast‚Å†-‚Å†moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents üìÖ upcoming front-end conferences css-tricks presents the power of serverless for front-end developers