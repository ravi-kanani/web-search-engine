home articles podcast tabletop graphic design about menu home articles podcast tabletop graphic design about subtractive design august 12, 2014 subtractive design is the process of removing imperfections and extraneous parts in order to strengthen the core elements. you can think of a design as something you build up, construct and let grow, but it’s pruning away the excess that gives a design a sense of simplicity, elegance, and power. make everything as simple as possible, but not simpler. —albert einstein make everything as simple as possible, and then a little simpler. —hectóre blivand first let's look at the theory behind this idea to see why designers in many fields often think in terms of negatives (subtracting things) rather than positives (adding things). then let's look at several successful subtractive designs so we know what to aim for. finally, i'll discuss why subtractive design often breeds controversy. why subtraction? designers in many fields, not just games, often think in terms of negatives (subtracting things) rather than positives (adding things). design is creating a form (a game in our case) that fits a context. there isn’t just one boundary we have to check between form and context though, there are infinitely many. is our game easy enough to learn? does it have the desired amount of strategy or depth? does it appeal to the intended age-group? is it cheap enough to make in both time and money? is it aesthetically pleasing? do the aesthetics help the player understand how to play the game? do the mechanics work well with each other? do they require the desired amount of dexterity? the list goes on. we first come up with a design that might fit all the requirements. sometimes this comes from the intuition of a designer who has internalized all those forces and somehow spits out a new answer. more likely, we start with something pretty well established so that we know it solves many of the requirements already. that’s how genres, sequels, and remakes help us make good (but not necessarily new) designs. once we have something, we have to evaluate how good our design is. does our form actually fit the context? architect christopher alexander had some choice words on this subject in his notes on the synthesis of form: we should find it almost impossible to characterize a house which fits its context. yet it is the easiest thing in the world to name the specific kinds of misfit which prevent good fit. a kitchen which is hard to clean, no place to park my car, the child playing where it can be run down by someone else’s car, rainwater coming in, overcrowding and lack of privacy, the eye-level grill which spits hot fat right into my eye, the gold plastic doorknob which deceives my expectations, and the front door i cannot find, are all misfits between the house and the lives and habits it's meant to fit. these misfits are the forces which must shape it, and there is no mistaking them. because they are expressed in negative form they are specific, and tangible enough to talk about. alexander explains that when a misfit occurs, we are able to point at it specifically and describe it. when we instead try to explain what a good fit would be like, we’re often reduced to generalities that are hard to act on. with this in mind i should like to recommend that we should always expect to see the process of achieving good fit between two entities as a negative process of neutralizing the incongruities, or irritants, or forces, which cause misfit. ico when fumito ueda designed ico, he did not start with a list of everything the game should have. instead, he started with the core idea that it should be a platform / puzzle game about a boy and a girl, and that the game should have emotional impact by creating an environment that had its own believable reality to it. using other platform and puzzle games a point of reference, he then started subtracting away everything that was extraneous to his core idea. other games might use a nine act structure where the story starts in a village, then you go into the forest, then you find a castle, then escape back to the forest, and so on. ueda was conscious of this, but cut everything except the castle, so that the castle could be fully realized, fully polished, and seem to be a character of its own. other games have npcs that stand around and give you hints, but when you see the same character say the same lines over and over, it takes you out of the fictional world. ueda stated from the beginning that he would have no such npcs. other games may have an army of different enemies, but ueda found that puzzles were enough, and only one type of enemy was needed. he also removed the health meter, inventory screen, and even background music from his design—all things that come standard in other games. another misfit that was on ueda’s mind was bad animation. if the core idea is to show a boy and a girl escaping a castle together, and we want a sense of immersion and reality, then nothing in the boy’s or girl’s animations can stand out as strange. his team spent a great deal of effort on the character animations, especially those where the girl and boy interact, because any imperfections there would have been glaring. i learned all this from ueda’s 2004 presentation at the game developer's conference, but there was one more detail that stuck with me. he showed us a screenshot of one room in the castle and asked us what was wrong with it. i thought it looked pretty good. ueda then pointed out that there was a chair in the screenshot that didn’t look very good. he said when something like this happens, you have to decide whether you have the time and resources to fix it (make the chair more beautiful and believable) or cut it. in this case, he cut the chair. for all ico’s cuts, you’d think it would be a game with nothing much left. and yet it received high critical acclaim as powerful game. the important elements are executed unusually well, and the unimportant elements—i couldn’t find any. braid jonathan blow’s braid shows a similar reductionist design with a similarly powerful result. the core concept behind braid is the manipulation and rewinding of time without the need of a meter to limit the mechanic. you can rewind time as much as you like, as often as you like, and the difficulty of the game comes in puzzles that test just how clever you are with this manipulation. because time manipulation is the core concept, braid explores time mechanics fully. on one level walking left reverses time while walking right moves time forward. on another, some objects are immune to the time shifting. each level investigates a new idea. what’s remarkable about braid is how many things jonathan blow cut away. there are no “lives,” because the entire idea of lives is incompatible with having infinite time-rewind powers. there are only about five types of enemies, much fewer than is usual for a 2d platform game. there are only two action buttons: jump and rewind time (though there is a third button used later in the game to put down an object). what’s most strikingly minimal of all in braid is the level design. each level is as small as it can possibly be, containing as few elements as it could realistically contain while still being interesting. this gives the game’s construction the feel of a tight short story: every part is there for a reason and there’s nothing extra. even the quantity of levels follows this logic—when the game is done exploring new time mechanics, it ends. it feels no need to make us fight hundreds of blue slimes in order to level up to fight red slimes. by trimming the fat in action buttons, ui, enemy types, level size, and level quantity, braid feels vigorous in the way strunk and white meant in the elements of style, 4th edition, as seen in his discussion of omitting needless words. vigorous writing is concise. a sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts. this requires not that the writer make all his sentences short, or that he avoid all detail and treat his subjects only in outline, but that every word tell. portal valve’s game portal is another example of a compact, distilled design. the core idea is that you can shoot two kinds of portals (orange and blue) and then walk through one to come out of the other. you have no actual weapons, no inventory screen, no npcs to talk to, not even any enemies aside from the occasional turret and the final boss. the controls are as simple as they can be, with action buttons only for shooting the two kinds of portals, for jump, and for using objects (open door, pick up crate, and so on). portal’s environments are sparse and sterile, containing practically nothing except for elements that are part of puzzles, elements that offer you visual cues as hints about what you should do, and elements to convey the story. that there’s nothing extra puts all the emphasis on the portal mechanic itself, which is incredibly fun. like braid, portal explores its mechanic fully, doing just about everything you can think of to do with portals, then it gracefully ends without overstaying its welcome or subjecting you to filler content. team fortress 2 valve’s team fortress 2 has a lot of things going for it, but it’s specifically the approach to map design that stands out as a case for subtractive design. most games of this type would offer as many maps as possible. more is seen as better by marketing departments, after all. valve deliberately limited the game to only six maps when it shipped, though. one benefit of fewer maps in a multiplayer game is less fragmentation of the player-base. if there are hundreds of maps it can be hard to find anyone who wants to play the particular map you do. but more to the point, valve knew that in most multiplayer games, the community settles on just a very few maps they play endlessly. if this is a known phenomenon in so many games, why make tons of maps? by sticking to only six, an unusually small set for this type of game, valve had time to make these the best, most polished maps they could. fewer maps means each one received more attention from playtesters, artists, and designers. the process of playtesting a map is, itself, a subtractive design exercise. you play it as much as possible in as many different ways as possible, looking for bugs, exploits, and defects that make the gameplay less fun or less strategic. the more you limit the number of maps, the more defects you can fix in each one. game designers should look outside the field of games for inspiration and ideas, so i'll present two examples of non-game software. google chrome google has a simple elegance in many of its products, and the google chrome web browser is a great example of subtracting the debris that other browsers had. why do we need two different fields at the top of a browser (one to search the web, one for the urls) when they could be combined into one? google chrome does this to save space and reduce clutter. there is no chance of confusing the two uses in one field anyway, because search terms have spaces between them while urls have things like “.com” in them. the core idea behind google chrome is “get out of the way and remove debris whenever possible.” the “find” field only shows up when you press cmd-f, otherwise it’s not even there to get in the way. when you mouse over a link, the status bar showing where the link points to shows up in small box in the corner, but this box fades away entirely at other times. chrome also got rid of these things from internet explorer 6: file menu edit menu view menu favorites menu tools menu help menu homepage button (you can turn it on in the options) search button (just type in the url bar to search) favorites tab button history button mail button print button edit button messenger button (what is this doing here??) the word “address” labeling the address bar status bar it added these interface elements: menu button for options about the current page menu button for options about google chrome in general new tab button. does this simpler interface with all the debris removed mean that google chrome is less powerful or less advanced than its competitors? quite the contrary. under the hood, it separates each tab into a new process, meaning that one pesky website can’t cause your entire browser to crash. it also does a better job of preventing memory leaks than its competitors with better memory garbage collection. the power is out-of-sight, and the browser ui is as minimal as possible so that everything is there for a purpose, everything with no purpose is gone, and the things that are there are high quality. other browsers have since become more like chrome. unified search/url bars and sandboxed tabs are now standard. apple's time machine apple also has a long history of simple and elegant products. it might be the best company in the world at making complicated things simple and elegant. apple has done that several times by crafting new kinds of interfaces. they created the first personal computer to use a mouse. the ipod’s scroll wheel was a simple way to scroll through hundreds of songs. the breakthrough of the multitouch interface on the iphone shook up the phone industry. i’ll use a less familiar example though: apple’s time machine software. the core concept behind this built-in part of a mac’s operating system is “make it so easy to back up your data that you’ll actually do it.” the problem with data backup software is not that it doesn’t do enough things, it’s that the average user is too lazy to ever actually do it at all. apple’s solution is a “zero click” interface, though maybe it’s more fair to call it one click. when you plug in any drive, a pop-up asks you if you’d like this to be your time machine drive to back up your files (it doesn’t ask if you’ve already set a time machine drive, of course). if you say yes, that’s all there is for you to do. time machine will then back up all your computer’s files and keep running backups every hour for the last 24 hours, daily backups for the last month, and weekly backups forever, until the drive is full. the interface for recovering old files is slick and useful, but it’s the “zero click” setup that makes the feature so practical. now that's subtractive. common themes there’s something all these examples have in common. apple’s time machine and google chrome are both very sophisticated under the hood, even though they present simple interfaces to the user. team fortress 2 is not more shallow for its decision to launch with fewer maps; it’s actually deeper because of that decision. portal and braid did not, as professor strunk would say, “avoid all detail and treat their subjects only in outline.” quite the contrary. portal and braid each fully explore their concepts—more fully than most larger, bloated games usually explore theirs. and finally, ico’s sense of reality, immersion, and emotional power is not less because it subtracted all the extraneous elements; it's more. in each case, subtracting did not leave us lacking, it enhanced the experience. the controversy subtractive design is not all rainbows and puppies though. by fully committing to this idea, you are more likely to encounter resistance on your game development team, with your publisher, and with your players. the reason is that when we use vague language, it’s easier to get an agreement. when we use very honest, precise language, it’s easier for someone to realize that they disagreed all along. “some amount of collateral damage is expected in the mission.” sure, ok. “we are going to kill innocent people on this mission.” wait, really? when we distill a design down to the core concepts and remove the extraneous, it forces us to admit and agree what the core concepts actually are. for example, as designer of street fighter hd remix, i made the statement that performing difficult moves is not part of the core concept of the game. it’s an imperfection that should be removed, so that there can be more focus on the essence of the game: strategy. clearly, that is a troublesome statement if you believe that performing difficult moves is part of the essence of the game. i think subtracting some emphasis on that aspect enhanced the final product though. likewise, in starcraft, the ability to play not just fast, but extremely fast is highly rewarded. when blizzard made starcraft 2, it had to decide what the game is really about at its core. maybe a game in the “real-time strategy” genre should focus a bit more on strategy and less on extremely fast clicking? creating more user-friendly features such as multiple-base selection, auto-mine, and no cap on the number of units you can select all point to them thinking that. (though they also added other features intentionally meant to add more clicks, so i don't know.) the point is that during development, the mere proposal of multiple-base selection and automine raised deep questions about what the the game is really about. is starcraft really about strategy? or is it equally about rewarding the most actions per minute that you can enter? it’s easier to agree that we like starcraft overall (vague) than it is to agree on whether a new version of the game should or shouldn’t remove the emphasis on certain skills. the card game magic: the gathering has an even deeper conflict about what it’s really about. when it comes to the wording on the cards, the magic team has made great strides over the years to remove unnecessary words, creating as many simple, elegant cards as they can. compare the original wording of the card control magic to the current wording: but on a more zoomed out level, what is magic really about? is it about delivering the most fun gameplay experience possible to its players? or selling collectable items that have artificial scarcity? one gets in the way of the other, as it stands. i propose that the essence of customizable card games is the gameplay, and that collectability is purely a barrier between players and the game. making such a statement naturally creates a firestorm of argument because it forces us define what the essence of a game is. that can be uncomfortable to do, but necessary for knowing how to design something. for my customizable card game called codex, i'm subtracting out all the chaff cards, and subtracting out the entire concept of collecting rares. it delivers the most gameplay possible in the fewest cards, which makes it the opposite of the standard approach of bloat in ccgs. closing thoughts it’s easiest to get people to agree on vague concepts. “the game we’re making is a platformer with exploration, but also with fast action and time pressure. it has an epic story of course, but also a personal story. the game is really challenging, but it’s for everyone to enjoy. it has 20 enemy types and 20 weapons including a kazoo and a kitchen sink.” what’s not to agree with? there’s something for everyone. a more direct approach would be to find a starting point, whether it’s another game’s design or something you generate yourself. how to do that is another topic entirely. but once that core concept is in place, stay on the lookout for things that get in the way. is every button press really needed? every menu item? every hud element? are there features that you just don’t have time to do justice? (let’s add multiplayer!) if the game is about testing player skill, is it testing the only the skills you want to test? if it’s about story, are all the scenes contributing to that story? do you need all the mechanics you planned, or will a smaller set (easier for the player to remember and learn) suffice? is there a way to make your levels smaller or shorter by removing or shrinking areas that do not have much purpose? getting rid of all that stuff means there are fewer things for the player to misunderstand, and makes it more likely that the vision of the game in your head actually ends up in the player’s head, too. it takes some courage and pain to commit to a specific idea and subtract the rest away, but i think ico, braid, portal, team fortress 2, google chrome, and apple's time machine all demonstrate that doing so can lead to powerful, memorable experiences. tags set1 ← playing to win: mailbagslippery slope and perpetual comeback → best of sirlin.net playing to win book codex design (23 articles) designing pandante blivand design designing yomi game balance and yomi designing puzzle strike street fighter hdr articles balancing puzzle fighter solvability slippery slope subtractive design multiplayer game balance: part 1: definitions part 2: viable options part 3: fairness part 4: intuition game balance handout tutorial videos: street fighter tutorial smash bros. brawl tutorial more articles... chat my tabletop games | my online games | playing to win | recommended books | about | contact