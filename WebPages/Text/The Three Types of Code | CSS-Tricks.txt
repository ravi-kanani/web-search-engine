skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / the three types of code author robin rendle 2 comments join conversation published feb 3, 2020 code personalized marketing with mailchimp every time i start a new project, i organize the code i‚Äôm looking at into three types, or categories if you like. and i think these types can be applied to any codebase, any language, any technology or open source project. whether i‚Äôm writing html or css or building a react component, thinking about these different categories has helped me figure out what to refactor and prioritize, and what to leave alone for now. those categories: boring code, salt mine code, and radioactive code. let me explain. boring code boring code is when it makes perfect sense when you read it. there's no need to refactor it, and it performs its function in a way that doesn‚Äôt make you want to throw yourself into a river. boring code is good code. it doesn‚Äôt do a kick-flip and it‚Äôs not trying to impress you. you can use it without having to write even more code or engineer hacks on top of it. boring code does exactly what it says on the tin and never causes any surprises. this function makes sense, this prop is clearly named, this react component is straightforward. there are no loops within loops, no mental gymnastics required here. however, boring code is near impossible to write because our understanding of it is almost always incomplete when we start tackling a problem. just look at how many considerations can go into a styling a simple paragraph for contrast. to write boring code, we must be diligent, we must endlessly refactor, and we must care for the codebase beyond a paycheck at the end of the month. boring code is good because boring code is kind. salt mine code this is the type of code that‚Äôs bonkers and makes not a lick of sense. it‚Äôs the sort of code that we can barely read but it‚Äôs buried so deep in the codebase that it‚Äôs near impossible to change anyway. however! it‚Äôs not leaking into other parts of our code, so we can mostly ignore it. it might not be pretty, and we probably don‚Äôt want to ever look at it so long as we live, but it‚Äôs not actively causing any damage. it‚Äôs this type of code that we can mostly forget about. it's the type of code that is dangerous if opened up and tampered with, but for now, everything is okay. the trouble is buried deep. radioactive code radioactive code is the real problem at the heart of every engineering team. it‚Äôs the let‚Äôs-not-go-to-work-today sort of code. it‚Äôs the stuff that is not only bad but is actively poisoning our codebase and making everything worse over time. imagine a codebase as a nuclear reactor; radioactive code is the stuff that‚Äôs breached the container and is now leaking into every part of our codebase. an example? for us at gusto and on the design systems team, i would consider our form components to be radioactive. each component causes more problems because we can never use the component as is; we have to hack it to get what we want. each time anyone uses this code they have to write even more code on top of it, making things worse over time, and it encourages everyone on the team to do the same. in our design system, when we want to add a class name to the div that wraps a form element, we must use the formfieldclass prop in one component, and wrapperclass in another. there is a proptype called isdefaultlayout and everyone sets it to false and writes custom css classes on top of it. in other words, not only does radioactive code make it hard for us to understand all this nonsense code, it makes it increasingly difficult to understand other parts of the codebase, too. because the file we‚Äôre looking at right now has dependencies on eight different things that we cannot see. the result of removing this radioactive code means changing everything else that depends upon it. in other words, radioactive code ‚Äî like our form components ‚Äî makes it impossible for the codebase to be trusted. radioactive code is not only bad for us and our codebase, but it is also bad for our team. it encourages bad habits, cruelty in slack threads, not to mention that it causes friction between team members that is hard to measure. radioactive code also encourages other teams in a company to go rogue and introduce new technologies into a codebase when the problem of radioactive code is not the tech itself. anyone can write this type of code, regardless of the language or the system or the linting when they‚Äôre not paying enough attention to the problem. or when they‚Äôre trying to be a little too smart. or when they‚Äôre trying to impress someone. how do we fix radioactive code? well, we must draw a circle around it and contain the madness that‚Äôs leaking into other parts of the codebase. then we must do something utterly heroic: we must make it boring. our learning partner need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. comments the sharp ninja permalink to comment# february 4, 2020 radioactive code also encourages other teams in a company to go rogue and introduce new technologies into a codebase when the problem of radioactive code is not the tech itself. gotta disagree with this one. there are many technologies where radioactive code is unavoidable. the intersection of requirements, marketing and css/html/js comes to mind. there is never a clean way to write code to dynamically style html with css involved as css is that ‚Äúblack box‚Äù that nobody truly understands how it works and out of fear of breaking 470 locations on a site, it gets overridden with !important tags in another css definition specific to that element, or worse, directly on the dom element‚Äôs style. reply lucas permalink to comment# february 4, 2020 despite ‚Äúradioactive‚Äù being a really cool sounding term, it does not really seem appropriate to me here, since what you describe seems to be more biologic like a disease, something infectious. radioactive would be more fitting to the salt mine. its there, its contained, you should not touch it, but it is powering a lot of stuff. much like a nuclear reactor. (this is really what i see on that ‚Äúimagine a nuclear reactor‚Äù part.) i dont know if you heard about the energiewende here in germany. this renewable stuff and what the politics are trying to save it actually pretty fitting to the radioactive description. a highly fragile system that is hold up by a lot of partly contradictory laws. i plead for boring code radioactive code renewable code reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast‚Å†-‚Å†moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents üìÖ upcoming front-end conferences css-tricks presents the power of serverless for front-end developers