skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / understanding web accessibility color contrast guidelines and ratios author stacie arellano 6 comments join conversation last updated mar 4, 2020 accessibility accessibility color high-contrast personalized marketing with mailchimp what should you do when you get a complaint about the color contrast in your web design? it might seem perfectly fine to you because you’re able to read content throughout the site, but to someone else, it might be a totally different experience. how can put yourself in that person’s shoes to improve their experience? there are some relatively easy ways to test contrast. for example, you can check the site on your phone or tablet in bright sunlight (not reliable*), or add a css filter to mimic a grayscale view). but… you don’t have to trust your eyes. not everyone has your exact eyes anyway, so your subjective opinion can possibly be a faulty measurement. you can mathematically know if two colors have enough contrast between them. the w3c has a document called web content accessibility guidelines (wcag) 2.1 that covers successful contrast guidelines. before we get to the math, we need to know what contrast ratio scores we are aiming to meet or exceed. to get a passing grade (aa), the contrast ratio is 4.5:1 for most body text and 3:1 for larger text. how did the w3c arrive at these ratios? the guidelines were created for anyone using a standard browser, with no additional assistive technology. the contrast ratios that the wcag suggests were based initially on earlier contrast standards and adjusted to accommodate newer display technologies, like antialiased text, so content would be readable by people with a variety of visual or cognitive difficulties, whether it be due to age, sickness, or other losses of visual acuity. we’re basically aiming to make text readable for someone with 20/40 vision, which is equivilent to the vision of someone 80 years old. visual acuity of 20/40 means you can only read something at 20 feet away that someone with perfect 20/20 vision could read if it was 40 feet away. so, say your design calls for antialiased text because it looks much smoother on a screen. it actually sacrifices a bit of contrast and ding your ratio. the wcag goes into more detail on how scoring works. there are other standards that take contrast in consideration, and the wcag used some of these considerations to develop their scoring. one is called the human factors engineering of computer workstations (ansi/hfes 100-2007) was published in 2007 and designated as an american standard for ergonomics. it combined and replaced two earlier standards that were created by separate committees. the goal of the combined standard was to accommodate 90% of computer users, and cover many aspects of computer use and ergonomics, including visual displays and contrast. so, that means we have physical screens to consider in our designs. what does the ratio mean? the contrast ratio explains the difference between the lightest color brightness and the darkest color brightness in a given range. it’s the relative luminance of each color. let’s start with an egregious example of a teal color text on a light gray background. <h1>title of your awesome site</h1> h1 {
  background-color: #888888;
  color: #1abc9c;
} yikes! it’s worth calling out that some tools, like wordpress, provide a helpful warning for this when there’s a poorly contrasted text and background combination. in the case of wordpress, a you get notice in the sidebar. "this color combination may be hard for people to read. try using a brighter background color and/or a darker text color." “ok,” you say. “perhaps you think that teal on gray color combination is not exactly great, but i can still make out what the content says.“ (i’m glad one of us can because it’s pretty much a muddy gray mess to me.) the contrast ratio for that fine piece of hypertext is 1.47:1. i wanted a better understanding of what the contrast scores were actually checking and came to find that it requires the use of mathematics… with a side of understanding the differences between human and computer vision. this journey taught me about the history of computer vision and a bit about biology, and gave me a small review of some math concepts i haven’t touched since college. here’s the equation: (l1 + 0.05) / (l2 + 0.05) l1 is the relative luminance of the lighter of the colors. l2 is the relative luminance of the darker of the colors. this seems simple, right? but first we need to determine the relative luminance for each color to get those variables. ok, back to relative luminance we mentioned it in passing, but it’s worth going deeper into relative luminance, or the relative brightness of any color expressed into a spectrum between 0 (black) and 1 (white). to determine the relative luminance for each color, we first need to get the rgb notation for a color. sometimes we’re working with hex color values and need to covert that over to rgb. there are online calculators that will do this for us, but there’s solid math happening in the background that makes it happen. our teal hex color, #1abc9c, becomes an rgb of 26, 188, 156. next, we take each value of the rgb color and divide each one by 255 (the max integer of rgb values) to get a linear value between 0 and 1. so now with our teal color it looks like this: component equation value red 26/255 0.10196078 green 188/255 0.73725490 blue 156/255 0.61176471 then we apply gamma correction, which defines the relationship between a pixel's numerical value and its actual luminance, to each component part of the rgb color. if the linear value of a component is less than .03938, we divide it by 12.92. otherwise, we add .055 and divide the total by 1.055 and take the result to the power of 2.4. our gamma-corrected color components from our teal color end up like this: component equation value red ((0.10196078 +.055)/1.055) ^ 2.4 0.01032982 green ((0.73725490 +.055)/1.055) ^ 2.4 0.50288646 blue ((0.61176471 +.055)/1.055) ^ 2.4 0.33245154 this part of our equation comes from the formula for determining relative luminance. we just sort of sped past gamma correction there without talking much about it and what it does. in short, it translates what a computer "sees” into the human perception of brightness. computers record light directly where twice the photons equals twice the brightness. human eyes perceive more levels of light in dim conditions and fewer in bright conditions. the digital devices around us make gamma encoding and decoding calculations all the time. it’s used to show us things on the screens that match up to our perception of how things appear to our eyes. finally, we multiply the different colors by numbers that signify how bright that color appears to the human eye. that means we determine the luminance of each color by multiplying the red component value by .2126, the green component value by .7152, and the blue component by .0722 before adding all three of those results together. you'll note that green gets the highest value here, so, one last time for teal: component equation value red 0.01032982 x 0.2126 0.00219611973 green 0.50288646 x 0.7152 0.35966439619 blue 0.33245154 x 0.0722 0.02400300118 ...and add them together for luminance! l1 = 0.00219611973 + 0.35966439619 + 0.02400300118 = 0.38586352 if we do the same to get our l2 value, that gives us 0.24620133. we finally have the l1 and l2 values we need to calculate contrast. to determine which value is l1 and which is l2 , we need to make sure that the larger number (which shows the lighter color) is always l1 and is divided by the smaller/darker color as l2. now compare that result with the wcag success criteria. for standard text size, between 18-22 points, a minimal result of 4.5 will pass with a grade of aa. if our text is larger, then a slightly lower score of 3 will do the job. but to get the highest wcag grade (aaa), we have to have a contrast ratio result of at least 7. our lovely combination fails all tests, coming far under 4.5 for regular text or 3 for headline style text. time to choose some better colors! i’m so glad we have computers and online tools to do this work for us! trying to work out the details step-by-step on paper gave me a couple weeks of frustration. it was a lot of me getting things wrong when comparing results to those of automated contrast checkers. remember how teachers in school always wanted you to show your math work to prove how you got to the answer? i made something to help us out. codepen embed fallback if you view this demo with the console open, you’ll see the math that goes into each step of the calculations. go ahead, try our two example colors, like #1abc9c and #888888. i just want my page to have proper contrast, what do i do?! there are a variety of accessibility resources that you can audit your site. here’s a list i put together, and there’s another list here on css-tricks. but here are a few tips to get you started. first, identify areas that are not serving your accessibility needs. the wave accessibility tool is a good place to start. run your site through that and it will give you contrast results and help identify trouble areas. yay, passing scores! follow the suggestions of the audit use best practices to improve your scores, and remove the errors. once you identify contrast errors, you can try out some different options right there in the wave tool. click on the color box to pop open a color picker. then play around until the errors go away, and you’ll know what you can replace in your code. run the test again this way, you can make sure your changes improved things. congratulations! you just made your product better for all users, not just ones affected by the accessibility errors! what comes next is up to you! you can make it easier on yourself and start all new products with the goal of making them accessible. make accessibility guidelines part of your requirements for both technology and design. you’ll save yourself potentially hundreds of hours of remediation, and potential legal complaints. u.s. government and education websites are required to comply, but other industries are often taken to task for not making their sites equally available for all people. if you have the option, consider using established and tested frameworks and web libraries (like bootstrap or google’s material design) that have already figured out optimum contrast theme colors. in many cases, you can take just what you need (like only the css) or at least review their color palettes to inform choices. you should still check the contrast though because, while most standard text options in a framework may follow contrast ratio wcag suggestions, things like alert and message styles may not. (i’m looking at you, bootstrap!) derek kay has reviewed a list of web frameworks with a focus on accessibility, which i suggest you read if you are looking for more options. the u.s. web design system shows one way to solve color/contrast puzzles using their css token system that labels colors to make contrast differences super clear), but they also link to several very good resources for improving and understanding contrast. we took a deeper dive here than perhaps you ever really need to know, but understanding what a contrast ratio is and what it actually means should help you remember to keep contrast in mind when designing future sites, web apps, and other software. having a clearer understanding of what the contrast ratio means helps me to remember who poor contrast can affect, and how to improve web and mobile products overall. i’m not the ultimate subject expert on contrast, just a very, very curious girl who sometimes has issues reading things on the web with low contrast. if you have any additional thoughts, corrections or further research to share, please leave a comment and i’ll amend this article! the fuller our understanding of the needs and requirements of our sites is, the better we can plan improvements and ultimately serve the needs of our audiences. further reading and references: how the web became unreadable - kevin marks understanding gamma correction - cambridge in colour learn more about gamma correction - science direct relative luminance - wikipedia 1. wavelength of maximum human visual sensitivity susan zhao 2007 our learning partner wanna learn accessibility deeply? frontend masters has a great course on accessibility from one of the top experts on javascript and accessibility in field: marcy sutton. this course is about react and gatsby.js and studying accessibility as part of ui components. wanna learn accessibility deeply? frontend masters has a great course on accessibility from one of the top experts on javascript and accessibility in field: marcy sutton. this course is about react and gatsby.js and studying accessibility as part of ui components. comments adrian roselli permalink to comment# february 19, 2020 at the beginning of the post is the suggestion that you can use a grayscale version of your design to quickly visually check contrast for easy misses. this does not work in practice. for example, green has a far higher luminance (~10×) than blue, but when both are converted to gray they can look the same, giving a false impression about their relative contrast. you can see this in the math used to find the luminance (y) of a color in the rgb color space: y = 0.2126r + 0.7152g + 0.0722b this is the same formula as further down in the article, which implies this with the equation and surrounding context. i think there is still room for confusion, however, and want to drive home the point that using grayscle as a proxy won’t do the trick. reply stacie arellano permalink to comment# february 19, 2020 great point! i absolutely agree with you. for people with different vision requirements, a simple grayscale review won’t/can’t catch all problems. the practice has come up as a suggestion across the web, but i personally will always trust actual spot checks with contrast checkers over this. i, personally, can’t trust my eyes much at all with my vision prescription, but they do actually make finding contrast issues easier as i literally have trouble reading them. this may make my personal contrast needs a bit more extreme than the current best practices. (so we clearly can’t choose the wine in front of me. ;) ) as long as the text in question passes the metrics, i let it go. kevin marks permalink to comment# february 20, 2020 unfortunately the wcag ratings don’t take ambient light and font weight into account. the approach of “tweak things until you just pass the threshold” tends to leave you with too-low contrast in a lot of cases. a better approach is to start with black on white text (or vice versa in dark mode) and only colour it when it is communicating something specific. delegating to frameworks doesn’t always help – bootstrap’s default blue link colour is too low contrast, for example. i wrote more on this here : https://www.wired.com/2016/10/how-the-web-became-unreadable/ reply stacie arellano permalink to comment# march 2, 2020 i agree with you, kevin, and have read your excellent article. :d in fact, i actually mentioned your specific article when i was talking to chris about this one. i think, generally, ambient light is mostly beyond the responsibility of the developers, unless they have complete control/awareness over where the output will be broadcast. tv, projector, handheld devices in a fishing boat, or stadium kiss cams will all have substantially different contrast requirements, beyond basic standards. sometimes a quiet word with presenters who have slide decks that are too hard(thin/light) to read can make future presentations easier to read. hopefully, if developers receive feedback about their work in different ambient lighting locations they will make adjustments. i did call out bootstrap a little bit, as it’s true, not every part of it is compliant, or readable. other frameworks can have the same partial compliance. we can not offload the responsibility for this. similarly, not all automated testing tools can understand opacity overlays and background photos behind text areas, meaning that something might add up to compliance, initially, but not actually be readable. we need to consider all products critically while developing and testing to make sure we can reach all audiences. but! if we’re going from a site with no contrast accommodation to a site with tested contrast, and developers who start to keep contrast in mind… in most cases i am going to call that improvement. it feels like contrast is a lesson we have to keep teaching over and over. mats svensson permalink to comment# february 27, 2020 please explain the exact logic and calculations behind using #2e2f3e instead of black , for the text on this page! reply peter stears permalink to comment# march 22, 2020 slight nitpick: in the relative luminance calculation, you use the value 0.03938 as the cut-off for gamma correction. the w3c formula specifies 0.03928 however. reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers