skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / articles / while you weren’t looking, css gradients got better author ana tudor 7 comments join conversation published feb 14, 2020 gradients personalized marketing with mailchimp one thing that caught my eye on the list of features for lea verou's conic-gradient() polyfill was the last item: supports double position syntax (two positions for the same color stop, as a shortcut for two consecutive color stops with the same color) surprisingly, i recently discovered most people aren't even aware that double position for gradient stops is something that actually exists in the spec, so i decided to write about it. according to the spec: specifying two locations makes it easier to create solid-color "stripes" in a gradient, without having to repeat the color twice. i completely agree, this was the first thing i thought of when i became aware of this feature. let's say we want to get the following result: a gradient with a bunch of equal width vertical stripes (which i picked up from an earlier post by chris): desired gradient result. the hex values are: #5461c8, #c724b1, #e4002b, #ff6900, #f6be00, #97d700, #00ab84 and #00a3e0. let's first see how we'd css this without using double stop positions! we have eight stripes, which makes each of them one-eighth of the gradient width. one eighth of 100% is 12.5%, so we go from one to the next at multiples of this value. this means our linear-gradient() looks as follows: linear-gradient(90deg, 
             #5461c8 12.5% /* 1*12.5% */, 
  #c724b1 0, #c724b1 25%   /* 2*12.5% */, 
  #e4002b 0, #e4002b 37.5% /* 3*12.5% */, 
  #ff6900 0, #ff6900 50%   /* 4*12.5% */, 
  #f6be00 0, #f6be00 62.5% /* 5*12.5% */, 
  #97d700 0, #97d700 75%   /* 6*12.5% */, 
  #00ab84 0, #00ab84 87.5% /* 7*12.5% */, 
  #00a3e0 0) note that we don't need to repeat stop position % values because, whenever a stop position is smaller than a previous one, we automatically have a sharp transition. that's why it's always safe to use 0 (which is always going to be smaller than any positive value) and have #c724b1 25%, #e4002b 0 instead of #c724b1 25%, #e4002b 25%, for example. this is something that can make our life easier in the future if, for example, we decide we want to add two more stripes and make the stop positions multiples of 10%. not too bad, especially compared to what gradient generators normally spit out. but if we decide one of those stripes in the middle doesn't quite fit in with the others, then changing it to something else means updating in two places. again, not too bad and nothing we can't get around with a little bit of help from a preprocessor: $c: #5461c8 #c724b1 #e4002b #ff6900 #f6be00 #97d700 #00ab84 #00a3e0;

@function get-stops($c-list) {
  $s-list: ();
  $n: length($c-list);
  $u: 100%/$n;
	
  @for $i from 1 to $n {
    $s-list: $s-list, 
             nth($c-list, $i) $i*$u, 
             nth($c-list, $i + 1) 0
  }

  @return $s-list
}

.strip {
  background: linear-gradient(90deg, get-stops($c)))
} this generates the exact css gradient we saw a bit earlier and now we don't have to modify anything in two places anymore. see the pen by thebabydino (@thebabydino) on codepen. however, even if a preprocessor can save us from typing the same thing twice, it doesn't eliminate repetition from the generated code. and we may not always want to use a preprocessor. leaving aside the fact that some people are stubborn or have an irrational fear or hate towards preprocessors, it sometimes feels a bit silly to use a loop. for example, when we barely have anything to loop over! let's say we want to get a much simpler background pattern, such as a diagonal hashes one, which i'd imagine is a much more common use case than an over-the-top rainbow one that's probably not a good fit on most websites anyway. desired hashes result this requires using repeating-linear-gradient() and this means a bit of repetition, even if we don't have the same long list of hex values as we did before: repeating-linear-gradient(-45deg, 
    #ccc /* can't skip this, repeating gradient won't work */, 
    #ccc 2px, 
    transparent 0, 
    transparent 9px /* can't skip this either, tells where gradient repetition starts */) here, we cannot ditch the first and last stops because those are precisely what indicate how the gradient repeats within the rectangle defined by the background-size. if you want to understand why it's better to use repeating-linear-gradient() instead of a plain old linear-gradient() combined with the proper background-size in order to create such hashes, check out this other article i wrote a while ago. this is precisely where such feature comes to the rescue — it allows us to avoid repetition in the final css code. for the rainbow stripes case, our css becomes: linear-gradient(90deg, 
    #5461c8 12.5%, 
    #c724b1 0 25%, 
    #e4002b 0 37.5%, 
    #ff6900 0 50%, 
    #f6be00 0 62.5%, 
    #97d700 0 75%, 
    #00ab84 0 87.5%, 
    #00a3e0 0) and to recreate the hashes, we only need: repeating-linear-gradient(-45deg, 
    #ccc 0 2px, 
    transparent 0 9px) see the pen by thebabydino (@thebabydino) on codepen. what about support? well, glad you asked! it actually happens to be pretty good! it works in safari, chromium browsers (which now includes edge as well!) and firefox. pre-chromium edge and maybe some mobile browsers could still hold you back, but if you don't have to worry about providing support for every browser under the sun or it's fine to provide a fallback, go ahead and start using this! our learning partner wanna learn css from a course? frontend masters has a full css learning path with multiple courses depending on how you want to approach it. there is an in-depth course coving all of css, a sass-specific course, a course on modern layouts, and a course on smacss, a approach to css architecture. wanna learn css from a course? frontend masters has a full css learning path with multiple courses depending on how you want to approach it. there is an in-depth course coving all of css, a sass-specific course, a course on modern layouts, and a course on smacss, a approach to css architecture. comments cesar permalink to comment# february 14, 2020 those hashes are exactly the effect i was looking for!! thank you so much reply nasrat permalink to comment# february 16, 2020 nice article what is the font in code snippets ??? fillip technologies permalink to comment# february 17, 2020 best article. thank you so much update the news. reply marc permalink to comment# february 18, 2020 thanks ana, i didn’t know that. for those who have to support older browsers, but still want to use the double position syntax, there is this postcss plugin: https://github.com/jonathantneal/postcss-double-position-gradients reply rob foxx permalink to comment# february 18, 2020 “leaving aside the fact that some people are stubborn or have an irrational fear or hate towards preprocessors..” – what a strange thing to state. leaving aside the “fact” that sweeping generalisations can taint an otherwise solid article, are those “facts” or just your own bias on the matter? reply ana tudor permalink to comment# february 18, 2020 given it says “some”, not “all”, it’s in no way a “sweeping generalisation”. and it’s not a “fact”, it’s a fact. every single time i say css variables are not here to replace preprocessor ones, because they each have their own purpose, each is capable of doing something the other can’t, there are always people who start shrieking about how using preprocessors is an antipattern, how preprocessors are bad, bad, bad. and it’s been around since before css variables. i remember articles from 8 years ago about how using preprocessors only bloats the code. which is silly, because it’s basically blaming the tool when the problem is really not understanding how it should be used. ethan shutt permalink to comment# february 18, 2020 in fairness, i would probably fall under that category. leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter notify me of follow-up comments by email. copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. related how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers