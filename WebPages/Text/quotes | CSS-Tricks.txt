skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / css almanac / properties / q / quotes quotes author sara cope 19 comments join conversation last updated feb 29, 2020 quotes personalized marketing with mailchimp the quotes property in css allows you to specify which types of quotes are used when quotes are added via the content: open-quote; or content: close-quote; rules. here’s how to use it: q {
  quotes: "“" "”" "‘" "’";
}
q::before {
    content: open-quote;
}
q::after {
    content: close-quote;
} in the example above, four values are added. a set of double smart quotes and a pair of single smart quotes. it's slightly confusing as each quote is wrapped in quotes - but those are just programmatic quotes (could be double (") or single (')) as anywhere else in css. the quotes inside are what will be used on the page. there are four values for the content property that relate to the quotes property: open-quote, close-quote, no-open-quote, and no-close-quote. the first pair of quotes in the value are the opening and closing quotes. the second pair are the opening and closing quotes for quotes nested one level deep within other quotes that also use the quotes property. e.g. a <q> element inside of a <q> element. a few examples: double quotes on the first quote, single quotes on the second. a quote with french quotes. you can place as many pairs of quotes in the quotes property as you like. but you don't have to put more than two, because for every extra quote it simply repeats the quotes values from the beginning. the no-open-quote and no-close-quote values stop the quotes from displaying, but they continue to increment the quote depth. more information don't use the <q> element unless you're quoting someone. in all other cases (irony, sarcasm, or whatever else you use quotes for) simply use the quotation marks themselves (like these: “ ”). this isn't just for the <q> element, it could be <blockquote> too or anything else. quotes & accents related properties content ::before / ::after other resources css2 spec css2 content spec mdn semantics of the `q` element, on the html doctor browser support chrome safari firefox opera ie android ios 11+ any 1.5+ 4+ 8+ any any our learning partner need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. comments gordon allen permalink to comment# january 15, 2012 not my quote, but i have adopted it. “great design will make people love your product/company” reply clever permalink to comment# september 21, 2012 gracias desde peru :d! reply fliptheweb permalink to comment# april 15, 2013 in multilingual sites we can use lang attribute on html tag, instead of adding class to quote. like this: html[lang="fr"] q {
  quotes: "«" "»";
} reply patanjali permalink to comment# november 5, 2014 after a lot of research, including looking at a lot of online versions of newspapers for usage and consistency, i found that while the official style guides for countries may specify the quote characters, there is such a wide variation in usage within a country that trying to tie the quote characters to the language for general purpose use might create frustrations. for example, in france, the guillemots seem to only be used in traditional newspapers, but most across the rest of the country were going with inward-facing or plain double quotes, as in the us. same with spain. and it is like that almost everywhere else, except north korea! it seems to be a further example of the web’s influence on national cultures, with online writers probably more influenced by the prodigious us online presence, than their own print media. i know some would like ‘proper’ style to be used within their nations, but such things are a lot more fluid these days, because what is ‘normal’ comes with a larger deviation range than it used to! it is coming down to knowing what one’s readers are used to. if they don’t expect guillemots, providing them may give the wrong impression of how ‘hip’ one is. for the tools i am creating, i will be offering the main 19 variations of two-level quote character combinations for selection along with the language. unfortunately, i just found out that chrome does not like using quotes specified using the css quotes attribute, so i will have to see if there is a workaround. at least the html dir=rtl attribute can be derived from languages starting with ‘ar’, ‘dv’, ‘fa’, ‘he’, ‘ps’, ‘ur’ or ‘yi’. unfortunately, that has to be via a php function, and not css. :( gunnar bittersmann permalink to comment# september 28, 2015 in most cases you’re better off using the :lang() pseudoclass, cf. http://www.w3.org/international/questions/qa-css-lang which quotation mark should be rendered on a multilingual page does not depend on the language of the whole page, but on the language of the text surrounding the quote, cf. https://lists.w3.org/archives/public/www-international/2011julsep/0069.html use :lang(fr) > q. in french typography there are spaces between the quote and the quotation marks, i.e. quotes: "«\a0" "\a0 »"; john permalink to comment# august 28, 2017 @ patanjali for example, in france, the guillemots seem to only be used in traditional newspapers, but most across the rest of the country were going with inward-facing or plain double quotes, as in the us. yeah, that’s because guillemets are not easily reachable on a keyboard. and the funny story is that the previous french gov actually missioned a standards’ org to design a keyboard layout on which they would (as well as accentuated characters). it seems to be a further example of the web’s influence on national cultures the most infuriating thing is definitely the spec, which is plain wrong for french defaults. it suggests “«” “»” “«” “»” as a default but it is just wrong. first, you need a non-breaking (thin) space after the opening quote and before the closing quote. then, nested quotes should be curly quotes because having nested guillemets makes a text unreadable. it is coming down to knowing what one’s readers are used to. french readers have no issue at all with guillemets. they get used to it as soon as they start reading (it is used everywhere except on john doe’s computer because it takes an insane windows alt-d+ combo to access guillemets). as a matter of fact, straight quotes are considered amateurish, typographically wrong and, more importantly, disrespectful of the french language/culture in some contexts. delon permalink to comment# july 15, 2013 found i needed to backslash escape those double quotes in the ‘quotes’ property to get them working. quotes : "\"" "\"" "'" "'";
 using chrome 28.0.1500.71 on mac os x. reply stephan permalink to comment# february 26, 2014 that is because you are (incorrectly) using straight quotes instead of typographic quotes (see https://en.wikipedia.org/wiki/quotation_mark). patanjali permalink to comment# november 5, 2014 i had come across a site that has an online css compressor that converted a sequence like “{quotes:’\201c’ ‘\201d’ ‘\2018’ ‘\2019’;}” to “{quotes:201c201d20182019;}”, though i left it at “{quotes:201c 201d 2018 2019;}” for readability. it worked across most browsers, except desktop and mobile chrome. after reading your post, i changed it back, and have got chrome working again! thank you! patanjali permalink to comment# november 7, 2014 with chrome, it is not all that simple. with other browsers (ie, samsung, ios), applying a style defining the quotes on the body and descendent elements produces the expected results, namely: a) the body element definition rules, unless a descendant element also has one, irrespective of lang attribute. b) if a q element has a style for quotes, only an embedded q element gets the new style, while the parent still has it antecedent quotes, irrespective of lang attributes on any of the elements. unfortunately, chrome only obeys the styles if there are no lang attributes on an element. as soon as the lang attribute is applied to an element, the quotes ‘officially’ applicable to the lang attribute apply to its descendent q elements, but also to it, if it is a q. that totally screws it all up. it would be fine if: a) all browsers did it. b) everybody used the ‘official’ quotes for a language. c) chrome applied it to the body element. the lang attribute is used semantically, perhaps for language tools (spelling, grammar), as it is not actually required for laying out text in the required direction, but the appropriate dir attribute, which can be directly derived from lang (by using a custom php function), is required to ensure the appropriate alignment of other elements, like tables and fieldsets. now, i am designing tools for html dummies, and want to avoid having users lumped with having to deal with such issues. i expect that most will not be doing multiple languages on the same page, but i would like things to applied in an ‘orthogonal’ (consistent and regular) way, in that specifying the language for a semantic element, like a section, will make its content lay out appropriately, but that they can choose the quote set appropriate to their target audience. with this chrome issue, it appears that i have to choose one of: a) let chrome users live with it. that is, suffer possibly odd quotes on q elements with a lang attribute, or within language-specific blocks. b) make page writers (the ‘dummies’) specify the dir attribute explicitly, but leave off the lang attribute. c) make page writers put in explicit quotes everywhere. i am tempted towards a) because for: a) only surfaces if requiring embedded quotes within another language. i am not expecting my users to be sophisticated users of multiple languages in the one page. of course, they would have to not use a quote class on a first level q element, though that is not semantically correct. b) i would prefer direction to be explicitly tied to language use, which is the principal reason to be using it in the first place. my target users would be very unlikely to use it for any other reason. c) i want to avoid users having to make too many micro-decisions. any comments? patanjali permalink to comment# november 8, 2014 actually, defining my quotes in css properly made them independent of the lang attribute, though it does mean that one of the classes must be used on every element where a lang attribute is used. my styles (use as you wish) are: /quotes/ body{quotes:'\201c' '\201d' '\2018' '\2019';}/“”‘’default/ .q_suidui * {quotes:'\2018' '\2019' '\201c' '\201d';}/‘’“”/ .q_duisui * {quotes:'\201c' '\201d' '\2018' '\2019';}/“”‘’/ .q_ds * {quotes:'\22' '\22' '\27' '\27';}/""''/ .q_dss * {quotes:'\301d' '\301e' '\27' '\27';}/〝〞''/ .q_gdogso * {quotes:'\ab' '\bb' '\2039' '\203a';}/«»‹›/ .q_gdodui * {quotes:'\ab' '\bb' '\201c' '\201d';}/«»“”/ .q_gdodol * {quotes:'\ab' '\bb' '\201e' '\201d';}/«»„”/ .q_nk * {quotes:'\300a' '\300b' '\3008' '\3009';}/《》〈〉/ .q_cjk * {quotes:'\300c' '\300d' '\300e' '\300f';}/「」『』/ .q_doosoo * {quotes:'\201e' '\201c' '\201a' '\2018';}/„“‚‘/ .q_dolsui * {quotes:'\201e' '\201d' '\2018' '\2019';}/„”‘’/ .q_dolsul * {quotes:'\201e' '\201d' '\2019' '\2019';}/„”’’/ .q_dolgdo * {quotes:'\201e' '\201d' '\ab' '\bb';}/„”«»/ .q_dolsuo * {quotes:'\201e' '\201d' '\2019' '\2018';}/„”’‘/ .q_dolgdi * {quotes:'\201e' '\201d' '\bb' '\ab';}/„”»«/ .q_gdigsi * {quotes:'\bb' '\ab' '\203a' '\2039';}/»«›‹/ .q_dulsul * {quotes:'\201d' '\201d' '\2019' '\2019';}/””’’/ .q_ja * {quotes:'\3010' '\3011' '\3016' '\3017';}/【】〖〗/ there is method in my class names. for example, dolgdo = double opposite left guillemot double outwards. saint permalink to comment# october 5, 2013 hey chris, you forgot to mention the <cite> tag, which also relates to quotes. reply aurélien permalink to comment# may 1, 2014 nope because the tag is no longer used for quotation (html4). in html5 it defines the title of a work. patanjali permalink to comment# november 5, 2014 @aurélien true, but in some countries, the quote marks are used for that, so the css may be set as “cite:before{content:open-quote;} cite:after{content:close-quote;}”. patanjali permalink to comment# september 28, 2015 @gunnar bittersmann as i wrote before, associating quotes with a language may not be appropriate, as the quotes generally used online, and therefore what people will generally expect there, are mostly a variant of the ” … ‘ … ‘ … ” used in the us. now, one could just use those for a country, but their use is not consistent, and some authors may want to appeal to readers who do expect to see the official country quotes, like the only one i found in france. reply prateek bagrecha permalink to comment# may 18, 2016 hi, in scss code, i am using “\201d”, however after grunt build its getting converted to “\201d”. i am not sure why. can any one help me out with this ? thanks prateek reply prateek bagrecha permalink to comment# may 18, 2016 hi, in scss code, i am using “\201d”, however after grunt build its getting converted to “\\201d”. i am not sure why. can any one help me out with this ? thanks prateek reply patanjali permalink to comment# december 23, 2016 if you are interested in seeing what online news sites are using for quotes in the countries you are interested in, go to: http://www.enewsreference.com/country_news.shtml that page lists by country, each link going to a listing of all publications, each indicating if is online with ‘in’, and in which languages it is available. re france, most online sites are in english, and of those in french, about half use us quotes. times, they are a changing! reply alexander schmidt permalink to comment# january 15, 2020 very good, if you need german quote marks! https://jsfiddle.net/bloggerschmidt/hnaw4p2j/ reply leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. how do you stay up to date in this fast⁠-⁠moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents 📅 upcoming front-end conferences css-tricks presents the power of serverless for front-end developers