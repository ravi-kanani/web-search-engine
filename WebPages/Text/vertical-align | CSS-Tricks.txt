skip to main content css-tricks articles videos almanac snippets newsletter jobs guides back to top contact about archives advertise jobs license subscribe forums guest posting facebook twitter youtube instagram rss search for: search open search open navigation home / css almanac / properties / v / vertical-align vertical-align author sara cope 12 comments join conversation last updated feb 29, 2020 vertical-align personalized marketing with mailchimp the vertical-align property in css controls how elements set next to each other on a line are lined up. img {
  vertical-align: middle;
} in order for this to work, the elements need to be set along a baseline. as in, inline (e.g. <span>, <img>) or inline-block (e.g. as set by the display property) elements. the valid values are: baseline - this is the default value. top - align the top of the element and its descendants with the top of the entire line. bottom - align the bottom of the element and its descendants with the bottom of the entire line. middle - aligns the middle of the element with the middle of lowercase letters in the parent. text-top - aligns the top of the element with the top of the parent element's font text-bottom - aligns the bottom of the element with the bottom of the parent element's font. sub - aligns the baseline of the element with the subscript-baseline of its parent. like where a <sub> would sit. super - aligns the baseline of the element with the superscript-baseline of its parent. like where a <sup> would sit. length - aligns the baseline of the element at the given length above the baseline of its parent. (e.g. px, %, em, rem, etc.) you can see examples of each here: check out this pen! a common use case is lining up an avatar with a username. to get them centered along a line, you'd use vertical-align: middle;. although note that it centers the text according to its tallest ascender and deepest descender. each element lines up according to the line you've set, which doesn't change from element to element. so, you can mix-and-match which elements have which value - the elements don't affect each other. note that vertical-align is useful on table-cell elements as well, aligning the content within them. sticking to top, middle, and bottom is the best bet though, as the other values have inconsistent cross-browser results. more information what is vertical-align? this property does not allow you to "vertically center" an element within another element. flexbox is more of the proper tool there. however, there is a trick involving a pseudo "ghost" element that can allow this to work. mdn browser support chrome safari firefox opera ie android ios any any any 4+ 4+ any any fairly consistent across browsers old and new, assuming the font is the same. note that some replace elements (e.g. <textarea>) are inline, but their baseline isn't specified, so behavior may vary from browser to browser. our learning partner need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. need some front-end development training? frontend masters is the best place to get it. they have courses on all the most important front-end technologies, from react to css, from vue to d3, and beyond with node.js and full stack. comments nick mitchell permalink to comment# september 26, 2012 hey guys, checkout chris‚Äô artical on vertical-align here: https://css-tricks.com/what-is-vertical-align n reply srvnk permalink to comment# september 18, 2013 thanks, your lecture works great.. reply devilal permalink to comment# september 1, 2014 nice explanation. thanks. reply daneeshgah permalink to comment# december 5, 2014 thanks, very helpfull reply nezar fadle permalink to comment# february 5, 2015 thanks for the amazing article :) how come the property name is vertical-align and a few of the property values starts with text ( text-top, text-bottom ) what a naming convention :( reply bud permalink to comment# august 7, 2015 what is the reason for > * following the class selector in the css rule on the demos? reply lee t permalink to comment# august 18, 2015 star hack to target all children the next level down mark permalink to comment# august 22, 2015 what does ‚Äúin order for this to work, the elements need to be set alone a baseline.‚Äù mean?? even with the example, for people learning css, this sentence does not make sense. the problem is not what baseline means, its the grammar of the sentence that throws everything off. can you please explain? reply mark robinson permalink to comment# october 27, 2015 alone should be along grant permalink to comment# june 29, 2017 i pretty sure you just mistyped, but it says it needs to be set ‚Äòalong‚Äô a baseline. this means that the element that you want to vertically align needs a surrounding element with which to align itself with in some way. for instance, if you have an inline <img> element (image element) within a <p> element (paragraph element), the text of the paragraph would be considered a baseline that you can vertically align the image with. you can‚Äôt simply stick an image inside of a <div> element and then try to move the image within that element with the vertical-align property. it won‚Äôt do anything. now if you did: <div>
  hello world! 
  <img>
</div>
 you use the text ‚Äòhello world!‚Äô as a baseline around which you align your img. this is an old question, i know, but hopefully this helps someone in the future. dk mo permalink to comment# november 13, 2019 how is can a container be fixed to the top of the webpage, so it wont disappear if the webpage is being srolled down (in css) reply geoff graham permalink to comment# november 13, 2019 you could do something like this: or, if the container starts in the middle of the page and you want it to stick when it reaches the top, here‚Äôs an example (though you‚Äôll need javascript): an explanation of how the intersection observer watches leave a reply cancel reply your email address will not be published. required fields are marked * comment name * email * website save my name, email, and website in this browser for the next time i comment. get the css-tricks newsletter copy and paste this code: micuno * leave this field empty all comments are held for moderation. we'll publish all comments that are on topic, not rude, and adhere to our code of conduct. you'll even get little stars if you do an extra good job. you may write comments in markdown. this is the best way to post any code, inline like `<div>this</div>` or multiline blocks within triple backtick fences (```) with double new lines before and after. want to tell us something privately, like pointing out a typo or stuff like that? contact us. we have a code of conduct. be cool. be helpful. the web is a big place. have fun. high five. how do you stay up to date in this fast‚Å†-‚Å†moving industry? a good start is to sign up for our weekly hand-written newsletter. we bring you the best articles and ideas from around the web, and what we think about them. email address subscribe facebook @csstricks twitter @css youtube @realcsstricks instagram @real_css_tricks rss feed css-tricks* is created, written by, and maintained by chris coyier and a team of swell people. the tech stack for this site is fairly boring. that's a good thing! i've used wordpress since day one all the way up to v17, a decision i'm very happy with. i also leverage jetpack for extra functionality and local for local development. *may or may not contain any actual "css" or "tricks". other nav contact about guest writing jobs advertise license subscribe all authors codepen codepen is a place to experiment, debug, and show off your html, css, and javascript creations. flywheel logo flywheel css-tricks is hosted by flywheel, the best wordpress hosting in the business, with a local development tool to match. shoptalk is a podcast all about front-end web design and development. css-tricks presents üìÖ upcoming front-end conferences css-tricks presents the power of serverless for front-end developers